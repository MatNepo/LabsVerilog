
Lab2_task2_sw.elf:     file format elf32-littlenios2
Lab2_task2_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000634 memsz 0x00000640 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00001654  2**0
                  CONTENTS
  2 .text         00000634  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00004654  00004654  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000000  00004654  00004654  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000000c  00004654  00004654  00001654  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00004660  00004660  00001654  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001678  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b95  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000005ce  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000006c2  00000000  00000000  00002963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000298  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005e3  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000561  00000000  00000000  000038a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00003e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000080  00000000  00000000  00003e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004c75  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00004c78  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004c80  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004c81  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00004c82  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004c86  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004c8a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  00004c8e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  00004c9d  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002d7fd  00000000  00000000  00004cbb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00004654 l    d  .rodata	00000000 .rodata
00004654 l    d  .rwdata	00000000 .rwdata
00004654 l    d  .bss	00000000 .bss
00004660 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_task2_sw_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 LAb2_task2_source.c
00000000 l    df *ABS*	00000000 alt_load.c
000040f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000041e0 g     F .text	00000054 alt_main
00004654 g       *ABS*	00000000 __flash_rwdata_start
00004454 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004658 g     O .bss	00000004 alt_argv
0000c654 g       *ABS*	00000000 _gp
00004234 g     F .text	00000030 usleep
00004570 g     F .text	00000064 .hidden __udivsi3
00004660 g       *ABS*	00000000 __bss_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_mem
00004414 g     F .text	00000020 alt_dcache_flush_all
00004654 g       *ABS*	00000000 __ram_rwdata_end
00004654 g       *ABS*	00000000 __ram_rodata_end
000045d4 g     F .text	00000058 .hidden __umodsi3
00004660 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004020 g     F .text	0000003c _start
0000429c g     F .text	00000020 alt_sys_init
0000462c g     F .text	00000028 .hidden __mulsi3
00004654 g       *ABS*	00000000 __ram_rwdata_start
00004654 g       *ABS*	00000000 __ram_rodata_start
000042bc g     F .text	00000158 alt_busy_sleep
00004660 g       *ABS*	00000000 __alt_stack_base
00004654 g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000098 main
0000465c g     O .bss	00000004 alt_envp
00004478 g     F .text	00000084 .hidden __divsi3
00004654 g       *ABS*	00000000 __flash_rodata_start
00004264 g     F .text	00000038 alt_irq_init
00004654 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004654 g       *ABS*	00000000 _edata
00004660 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000044fc g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004434 g     F .text	00000020 alt_icache_flush_all
0000415c g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b19514 	ori	gp,gp,50772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10919514 	ori	r2,r2,18004

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d19814 	ori	r3,r3,18016

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff79f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000415c0 	call	415c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041e00 	call	41e0 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff7a04>

0000405c <main>:
#include <unistd.h>

int main(void)
{
    405c:	defffb04 	addi	sp,sp,-20
    4060:	dfc00415 	stw	ra,16(sp)
    4064:	df000315 	stw	fp,12(sp)
    4068:	df000304 	addi	fp,sp,12
    char *psw = (char*) 0x8000;
    406c:	00a00014 	movui	r2,32768
    4070:	e0bffe15 	stw	r2,-8(fp)
    char *pled = (char*) 0x8100;
    4074:	00a04014 	movui	r2,33024
    4078:	e0bfff15 	stw	r2,-4(fp)
    char count = 64;
    407c:	00801004 	movi	r2,64
    4080:	e0bffd05 	stb	r2,-12(fp)

    while(1)
    {
        usleep(300000);
    4084:	01000174 	movhi	r4,5
    4088:	2124f804 	addi	r4,r4,-27680
    408c:	00042340 	call	4234 <usleep>

        if(((*psw) != 0x00) && (((*psw)-1) > count))
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10800003 	ldbu	r2,0(r2)
    4098:	10803fcc 	andi	r2,r2,255
    409c:	1080201c 	xori	r2,r2,128
    40a0:	10bfe004 	addi	r2,r2,-128
    40a4:	10000c26 	beq	r2,zero,40d8 <main+0x7c>
    40a8:	e0bffe17 	ldw	r2,-8(fp)
    40ac:	10800003 	ldbu	r2,0(r2)
    40b0:	10803fcc 	andi	r2,r2,255
    40b4:	1080201c 	xori	r2,r2,128
    40b8:	10bfe004 	addi	r2,r2,-128
    40bc:	10bfffc4 	addi	r2,r2,-1
    40c0:	e0fffd07 	ldb	r3,-12(fp)
    40c4:	1880040e 	bge	r3,r2,40d8 <main+0x7c>
            count++; /* Continue 0-SW[7:0] counting loop. */
    40c8:	e0bffd03 	ldbu	r2,-12(fp)
    40cc:	10800044 	addi	r2,r2,1
    40d0:	e0bffd05 	stb	r2,-12(fp)
    40d4:	00000106 	br	40dc <main+0x80>
        else
            count = 0; /* start counting loop from 0 */
    40d8:	e03ffd05 	stb	zero,-12(fp)

        *pled = ~count;
    40dc:	e0bffd03 	ldbu	r2,-12(fp)
    40e0:	0084303a 	nor	r2,zero,r2
    40e4:	1007883a 	mov	r3,r2
    40e8:	e0bfff17 	ldw	r2,-4(fp)
    40ec:	10c00005 	stb	r3,0(r2)
    }
    40f0:	003fe406 	br	4084 <_gp+0xffff7a30>

000040f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    40f4:	defffc04 	addi	sp,sp,-16
    40f8:	df000315 	stw	fp,12(sp)
    40fc:	df000304 	addi	fp,sp,12
    4100:	e13ffd15 	stw	r4,-12(fp)
    4104:	e17ffe15 	stw	r5,-8(fp)
    4108:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    410c:	e0fffe17 	ldw	r3,-8(fp)
    4110:	e0bffd17 	ldw	r2,-12(fp)
    4114:	18800c26 	beq	r3,r2,4148 <alt_load_section+0x54>
  {
    while( to != end )
    4118:	00000806 	br	413c <alt_load_section+0x48>
    {
      *to++ = *from++;
    411c:	e0bffe17 	ldw	r2,-8(fp)
    4120:	10c00104 	addi	r3,r2,4
    4124:	e0fffe15 	stw	r3,-8(fp)
    4128:	e0fffd17 	ldw	r3,-12(fp)
    412c:	19000104 	addi	r4,r3,4
    4130:	e13ffd15 	stw	r4,-12(fp)
    4134:	18c00017 	ldw	r3,0(r3)
    4138:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    413c:	e0fffe17 	ldw	r3,-8(fp)
    4140:	e0bfff17 	ldw	r2,-4(fp)
    4144:	18bff51e 	bne	r3,r2,411c <_gp+0xffff7ac8>
    {
      *to++ = *from++;
    }
  }
}
    4148:	0001883a 	nop
    414c:	e037883a 	mov	sp,fp
    4150:	df000017 	ldw	fp,0(sp)
    4154:	dec00104 	addi	sp,sp,4
    4158:	f800283a 	ret

0000415c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    415c:	defffe04 	addi	sp,sp,-8
    4160:	dfc00115 	stw	ra,4(sp)
    4164:	df000015 	stw	fp,0(sp)
    4168:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    416c:	01800034 	movhi	r6,0
    4170:	31919504 	addi	r6,r6,18004
    4174:	01400034 	movhi	r5,0
    4178:	29519504 	addi	r5,r5,18004
    417c:	01000034 	movhi	r4,0
    4180:	21119504 	addi	r4,r4,18004
    4184:	00040f40 	call	40f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4188:	01800034 	movhi	r6,0
    418c:	31900804 	addi	r6,r6,16416
    4190:	01400034 	movhi	r5,0
    4194:	29500804 	addi	r5,r5,16416
    4198:	01000034 	movhi	r4,0
    419c:	21100804 	addi	r4,r4,16416
    41a0:	00040f40 	call	40f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    41a4:	01800034 	movhi	r6,0
    41a8:	31919504 	addi	r6,r6,18004
    41ac:	01400034 	movhi	r5,0
    41b0:	29519504 	addi	r5,r5,18004
    41b4:	01000034 	movhi	r4,0
    41b8:	21119504 	addi	r4,r4,18004
    41bc:	00040f40 	call	40f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    41c0:	00044140 	call	4414 <alt_dcache_flush_all>
  alt_icache_flush_all();
    41c4:	00044340 	call	4434 <alt_icache_flush_all>
}
    41c8:	0001883a 	nop
    41cc:	e037883a 	mov	sp,fp
    41d0:	dfc00117 	ldw	ra,4(sp)
    41d4:	df000017 	ldw	fp,0(sp)
    41d8:	dec00204 	addi	sp,sp,8
    41dc:	f800283a 	ret

000041e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41e0:	defffe04 	addi	sp,sp,-8
    41e4:	dfc00115 	stw	ra,4(sp)
    41e8:	df000015 	stw	fp,0(sp)
    41ec:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41f0:	0009883a 	mov	r4,zero
    41f4:	00042640 	call	4264 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    41f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    41fc:	000429c0 	call	429c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4200:	d0a00017 	ldw	r2,-32768(gp)
    4204:	d0e00117 	ldw	r3,-32764(gp)
    4208:	d1200217 	ldw	r4,-32760(gp)
    420c:	200d883a 	mov	r6,r4
    4210:	180b883a 	mov	r5,r3
    4214:	1009883a 	mov	r4,r2
    4218:	000405c0 	call	405c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    421c:	0001883a 	nop
    4220:	e037883a 	mov	sp,fp
    4224:	dfc00117 	ldw	ra,4(sp)
    4228:	df000017 	ldw	fp,0(sp)
    422c:	dec00204 	addi	sp,sp,8
    4230:	f800283a 	ret

00004234 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    4234:	defffd04 	addi	sp,sp,-12
    4238:	dfc00215 	stw	ra,8(sp)
    423c:	df000115 	stw	fp,4(sp)
    4240:	df000104 	addi	fp,sp,4
    4244:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    4248:	e13fff17 	ldw	r4,-4(fp)
    424c:	00042bc0 	call	42bc <alt_busy_sleep>
}
    4250:	e037883a 	mov	sp,fp
    4254:	dfc00117 	ldw	ra,4(sp)
    4258:	df000017 	ldw	fp,0(sp)
    425c:	dec00204 	addi	sp,sp,8
    4260:	f800283a 	ret

00004264 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4264:	defffd04 	addi	sp,sp,-12
    4268:	dfc00215 	stw	ra,8(sp)
    426c:	df000115 	stw	fp,4(sp)
    4270:	df000104 	addi	fp,sp,4
    4274:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PD, nios2_PD);
    4278:	00044540 	call	4454 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    427c:	00800044 	movi	r2,1
    4280:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4284:	0001883a 	nop
    4288:	e037883a 	mov	sp,fp
    428c:	dfc00117 	ldw	ra,4(sp)
    4290:	df000017 	ldw	fp,0(sp)
    4294:	dec00204 	addi	sp,sp,8
    4298:	f800283a 	ret

0000429c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    429c:	deffff04 	addi	sp,sp,-4
    42a0:	df000015 	stw	fp,0(sp)
    42a4:	d839883a 	mov	fp,sp
}
    42a8:	0001883a 	nop
    42ac:	e037883a 	mov	sp,fp
    42b0:	df000017 	ldw	fp,0(sp)
    42b4:	dec00104 	addi	sp,sp,4
    42b8:	f800283a 	ret

000042bc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    42bc:	defffa04 	addi	sp,sp,-24
    42c0:	dfc00515 	stw	ra,20(sp)
    42c4:	df000415 	stw	fp,16(sp)
    42c8:	df000404 	addi	fp,sp,16
    42cc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    42d0:	00800244 	movi	r2,9
    42d4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    42d8:	014003f4 	movhi	r5,15
    42dc:	29509004 	addi	r5,r5,16960
    42e0:	e13ffd17 	ldw	r4,-12(fp)
    42e4:	000462c0 	call	462c <__mulsi3>
    42e8:	100b883a 	mov	r5,r2
    42ec:	0100bef4 	movhi	r4,763
    42f0:	213c2004 	addi	r4,r4,-3968
    42f4:	00045700 	call	4570 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    42f8:	100b883a 	mov	r5,r2
    42fc:	01200034 	movhi	r4,32768
    4300:	213fffc4 	addi	r4,r4,-1
    4304:	00045700 	call	4570 <__udivsi3>
    4308:	100b883a 	mov	r5,r2
    430c:	e13fff17 	ldw	r4,-4(fp)
    4310:	00045700 	call	4570 <__udivsi3>
    4314:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    4318:	e0bffe17 	ldw	r2,-8(fp)
    431c:	10002a26 	beq	r2,zero,43c8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    4320:	e03ffc15 	stw	zero,-16(fp)
    4324:	00001706 	br	4384 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4328:	00a00034 	movhi	r2,32768
    432c:	10bfffc4 	addi	r2,r2,-1
    4330:	10bfffc4 	addi	r2,r2,-1
    4334:	103ffe1e 	bne	r2,zero,4330 <_gp+0xffff7cdc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    4338:	014003f4 	movhi	r5,15
    433c:	29509004 	addi	r5,r5,16960
    4340:	e13ffd17 	ldw	r4,-12(fp)
    4344:	000462c0 	call	462c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4348:	100b883a 	mov	r5,r2
    434c:	0100bef4 	movhi	r4,763
    4350:	213c2004 	addi	r4,r4,-3968
    4354:	00045700 	call	4570 <__udivsi3>
    4358:	100b883a 	mov	r5,r2
    435c:	01200034 	movhi	r4,32768
    4360:	213fffc4 	addi	r4,r4,-1
    4364:	00045700 	call	4570 <__udivsi3>
    4368:	1007883a 	mov	r3,r2
    436c:	e0bfff17 	ldw	r2,-4(fp)
    4370:	10c5c83a 	sub	r2,r2,r3
    4374:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4378:	e0bffc17 	ldw	r2,-16(fp)
    437c:	10800044 	addi	r2,r2,1
    4380:	e0bffc15 	stw	r2,-16(fp)
    4384:	e0fffc17 	ldw	r3,-16(fp)
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	18bfe616 	blt	r3,r2,4328 <_gp+0xffff7cd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    4390:	014003f4 	movhi	r5,15
    4394:	29509004 	addi	r5,r5,16960
    4398:	e13ffd17 	ldw	r4,-12(fp)
    439c:	000462c0 	call	462c <__mulsi3>
    43a0:	100b883a 	mov	r5,r2
    43a4:	0100bef4 	movhi	r4,763
    43a8:	213c2004 	addi	r4,r4,-3968
    43ac:	00045700 	call	4570 <__udivsi3>
    43b0:	e17fff17 	ldw	r5,-4(fp)
    43b4:	1009883a 	mov	r4,r2
    43b8:	000462c0 	call	462c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    43bc:	10bfffc4 	addi	r2,r2,-1
    43c0:	103ffe1e 	bne	r2,zero,43bc <_gp+0xffff7d68>
    43c4:	00000d06 	br	43fc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    43c8:	014003f4 	movhi	r5,15
    43cc:	29509004 	addi	r5,r5,16960
    43d0:	e13ffd17 	ldw	r4,-12(fp)
    43d4:	000462c0 	call	462c <__mulsi3>
    43d8:	100b883a 	mov	r5,r2
    43dc:	0100bef4 	movhi	r4,763
    43e0:	213c2004 	addi	r4,r4,-3968
    43e4:	00045700 	call	4570 <__udivsi3>
    43e8:	e17fff17 	ldw	r5,-4(fp)
    43ec:	1009883a 	mov	r4,r2
    43f0:	000462c0 	call	462c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    43f4:	10bfffc4 	addi	r2,r2,-1
    43f8:	00bffe16 	blt	zero,r2,43f4 <_gp+0xffff7da0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    43fc:	0005883a 	mov	r2,zero
}
    4400:	e037883a 	mov	sp,fp
    4404:	dfc00117 	ldw	ra,4(sp)
    4408:	df000017 	ldw	fp,0(sp)
    440c:	dec00204 	addi	sp,sp,8
    4410:	f800283a 	ret

00004414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4414:	deffff04 	addi	sp,sp,-4
    4418:	df000015 	stw	fp,0(sp)
    441c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4420:	0001883a 	nop
    4424:	e037883a 	mov	sp,fp
    4428:	df000017 	ldw	fp,0(sp)
    442c:	dec00104 	addi	sp,sp,4
    4430:	f800283a 	ret

00004434 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4434:	deffff04 	addi	sp,sp,-4
    4438:	df000015 	stw	fp,0(sp)
    443c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4440:	0001883a 	nop
    4444:	e037883a 	mov	sp,fp
    4448:	df000017 	ldw	fp,0(sp)
    444c:	dec00104 	addi	sp,sp,4
    4450:	f800283a 	ret

00004454 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    4454:	deffff04 	addi	sp,sp,-4
    4458:	df000015 	stw	fp,0(sp)
    445c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4460:	000170fa 	wrctl	ienable,zero
}
    4464:	0001883a 	nop
    4468:	e037883a 	mov	sp,fp
    446c:	df000017 	ldw	fp,0(sp)
    4470:	dec00104 	addi	sp,sp,4
    4474:	f800283a 	ret

00004478 <__divsi3>:
    4478:	20001b16 	blt	r4,zero,44e8 <__divsi3+0x70>
    447c:	000f883a 	mov	r7,zero
    4480:	28001616 	blt	r5,zero,44dc <__divsi3+0x64>
    4484:	200d883a 	mov	r6,r4
    4488:	29001a2e 	bgeu	r5,r4,44f4 <__divsi3+0x7c>
    448c:	00800804 	movi	r2,32
    4490:	00c00044 	movi	r3,1
    4494:	00000106 	br	449c <__divsi3+0x24>
    4498:	10000d26 	beq	r2,zero,44d0 <__divsi3+0x58>
    449c:	294b883a 	add	r5,r5,r5
    44a0:	10bfffc4 	addi	r2,r2,-1
    44a4:	18c7883a 	add	r3,r3,r3
    44a8:	293ffb36 	bltu	r5,r4,4498 <_gp+0xffff7e44>
    44ac:	0005883a 	mov	r2,zero
    44b0:	18000726 	beq	r3,zero,44d0 <__divsi3+0x58>
    44b4:	0005883a 	mov	r2,zero
    44b8:	31400236 	bltu	r6,r5,44c4 <__divsi3+0x4c>
    44bc:	314dc83a 	sub	r6,r6,r5
    44c0:	10c4b03a 	or	r2,r2,r3
    44c4:	1806d07a 	srli	r3,r3,1
    44c8:	280ad07a 	srli	r5,r5,1
    44cc:	183ffa1e 	bne	r3,zero,44b8 <_gp+0xffff7e64>
    44d0:	38000126 	beq	r7,zero,44d8 <__divsi3+0x60>
    44d4:	0085c83a 	sub	r2,zero,r2
    44d8:	f800283a 	ret
    44dc:	014bc83a 	sub	r5,zero,r5
    44e0:	39c0005c 	xori	r7,r7,1
    44e4:	003fe706 	br	4484 <_gp+0xffff7e30>
    44e8:	0109c83a 	sub	r4,zero,r4
    44ec:	01c00044 	movi	r7,1
    44f0:	003fe306 	br	4480 <_gp+0xffff7e2c>
    44f4:	00c00044 	movi	r3,1
    44f8:	003fee06 	br	44b4 <_gp+0xffff7e60>

000044fc <__modsi3>:
    44fc:	20001716 	blt	r4,zero,455c <__modsi3+0x60>
    4500:	000f883a 	mov	r7,zero
    4504:	2005883a 	mov	r2,r4
    4508:	28001216 	blt	r5,zero,4554 <__modsi3+0x58>
    450c:	2900162e 	bgeu	r5,r4,4568 <__modsi3+0x6c>
    4510:	01800804 	movi	r6,32
    4514:	00c00044 	movi	r3,1
    4518:	00000106 	br	4520 <__modsi3+0x24>
    451c:	30000a26 	beq	r6,zero,4548 <__modsi3+0x4c>
    4520:	294b883a 	add	r5,r5,r5
    4524:	31bfffc4 	addi	r6,r6,-1
    4528:	18c7883a 	add	r3,r3,r3
    452c:	293ffb36 	bltu	r5,r4,451c <_gp+0xffff7ec8>
    4530:	18000526 	beq	r3,zero,4548 <__modsi3+0x4c>
    4534:	1806d07a 	srli	r3,r3,1
    4538:	11400136 	bltu	r2,r5,4540 <__modsi3+0x44>
    453c:	1145c83a 	sub	r2,r2,r5
    4540:	280ad07a 	srli	r5,r5,1
    4544:	183ffb1e 	bne	r3,zero,4534 <_gp+0xffff7ee0>
    4548:	38000126 	beq	r7,zero,4550 <__modsi3+0x54>
    454c:	0085c83a 	sub	r2,zero,r2
    4550:	f800283a 	ret
    4554:	014bc83a 	sub	r5,zero,r5
    4558:	003fec06 	br	450c <_gp+0xffff7eb8>
    455c:	0109c83a 	sub	r4,zero,r4
    4560:	01c00044 	movi	r7,1
    4564:	003fe706 	br	4504 <_gp+0xffff7eb0>
    4568:	00c00044 	movi	r3,1
    456c:	003ff106 	br	4534 <_gp+0xffff7ee0>

00004570 <__udivsi3>:
    4570:	200d883a 	mov	r6,r4
    4574:	2900152e 	bgeu	r5,r4,45cc <__udivsi3+0x5c>
    4578:	28001416 	blt	r5,zero,45cc <__udivsi3+0x5c>
    457c:	00800804 	movi	r2,32
    4580:	00c00044 	movi	r3,1
    4584:	00000206 	br	4590 <__udivsi3+0x20>
    4588:	10000e26 	beq	r2,zero,45c4 <__udivsi3+0x54>
    458c:	28000516 	blt	r5,zero,45a4 <__udivsi3+0x34>
    4590:	294b883a 	add	r5,r5,r5
    4594:	10bfffc4 	addi	r2,r2,-1
    4598:	18c7883a 	add	r3,r3,r3
    459c:	293ffa36 	bltu	r5,r4,4588 <_gp+0xffff7f34>
    45a0:	18000826 	beq	r3,zero,45c4 <__udivsi3+0x54>
    45a4:	0005883a 	mov	r2,zero
    45a8:	31400236 	bltu	r6,r5,45b4 <__udivsi3+0x44>
    45ac:	314dc83a 	sub	r6,r6,r5
    45b0:	10c4b03a 	or	r2,r2,r3
    45b4:	1806d07a 	srli	r3,r3,1
    45b8:	280ad07a 	srli	r5,r5,1
    45bc:	183ffa1e 	bne	r3,zero,45a8 <_gp+0xffff7f54>
    45c0:	f800283a 	ret
    45c4:	0005883a 	mov	r2,zero
    45c8:	f800283a 	ret
    45cc:	00c00044 	movi	r3,1
    45d0:	003ff406 	br	45a4 <_gp+0xffff7f50>

000045d4 <__umodsi3>:
    45d4:	2005883a 	mov	r2,r4
    45d8:	2900122e 	bgeu	r5,r4,4624 <__umodsi3+0x50>
    45dc:	28001116 	blt	r5,zero,4624 <__umodsi3+0x50>
    45e0:	01800804 	movi	r6,32
    45e4:	00c00044 	movi	r3,1
    45e8:	00000206 	br	45f4 <__umodsi3+0x20>
    45ec:	30000c26 	beq	r6,zero,4620 <__umodsi3+0x4c>
    45f0:	28000516 	blt	r5,zero,4608 <__umodsi3+0x34>
    45f4:	294b883a 	add	r5,r5,r5
    45f8:	31bfffc4 	addi	r6,r6,-1
    45fc:	18c7883a 	add	r3,r3,r3
    4600:	293ffa36 	bltu	r5,r4,45ec <_gp+0xffff7f98>
    4604:	18000626 	beq	r3,zero,4620 <__umodsi3+0x4c>
    4608:	1806d07a 	srli	r3,r3,1
    460c:	11400136 	bltu	r2,r5,4614 <__umodsi3+0x40>
    4610:	1145c83a 	sub	r2,r2,r5
    4614:	280ad07a 	srli	r5,r5,1
    4618:	183ffb1e 	bne	r3,zero,4608 <_gp+0xffff7fb4>
    461c:	f800283a 	ret
    4620:	f800283a 	ret
    4624:	00c00044 	movi	r3,1
    4628:	003ff706 	br	4608 <_gp+0xffff7fb4>

0000462c <__mulsi3>:
    462c:	0005883a 	mov	r2,zero
    4630:	20000726 	beq	r4,zero,4650 <__mulsi3+0x24>
    4634:	20c0004c 	andi	r3,r4,1
    4638:	2008d07a 	srli	r4,r4,1
    463c:	18000126 	beq	r3,zero,4644 <__mulsi3+0x18>
    4640:	1145883a 	add	r2,r2,r5
    4644:	294b883a 	add	r5,r5,r5
    4648:	203ffa1e 	bne	r4,zero,4634 <_gp+0xffff7fe0>
    464c:	f800283a 	ret
    4650:	f800283a 	ret
