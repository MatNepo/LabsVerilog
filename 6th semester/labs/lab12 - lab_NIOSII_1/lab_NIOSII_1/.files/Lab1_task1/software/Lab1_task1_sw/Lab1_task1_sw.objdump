
Lab1_task1_sw.elf:     file format elf32-littlenios2
Lab1_task1_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000610 memsz 0x0000061c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00001630  2**0
                  CONTENTS
  2 .text         00000610  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00004630  00004630  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000000  00004630  00004630  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000000c  00004630  00004630  00001630  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000463c  0000463c  00001630  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001658  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b99  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000005d0  00000000  00000000  00002379  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000006b8  00000000  00000000  00002949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000298  00000000  00000000  00003004  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005e3  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000561  00000000  00000000  0000387f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00003de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000080  00000000  00000000  00003e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004c4d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004c58  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00004c5a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004c5e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004c62  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  00004c66  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  00004c75  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002d7fd  00000000  00000000  00004c93  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00004630 l    d  .rodata	00000000 .rodata
00004630 l    d  .rwdata	00000000 .rwdata
00004630 l    d  .bss	00000000 .bss
0000463c l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab1_task1_sw_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Lab1_task1_source.c
00000000 l    df *ABS*	00000000 alt_load.c
000040d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000041bc g     F .text	00000054 alt_main
00004630 g       *ABS*	00000000 __flash_rwdata_start
00004430 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004634 g     O .bss	00000004 alt_argv
0000c630 g       *ABS*	00000000 _gp
00004210 g     F .text	00000030 usleep
0000454c g     F .text	00000064 .hidden __udivsi3
0000463c g       *ABS*	00000000 __bss_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_mem
000043f0 g     F .text	00000020 alt_dcache_flush_all
00004630 g       *ABS*	00000000 __ram_rwdata_end
00004630 g       *ABS*	00000000 __ram_rodata_end
000045b0 g     F .text	00000058 .hidden __umodsi3
0000463c g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004020 g     F .text	0000003c _start
00004278 g     F .text	00000020 alt_sys_init
00004608 g     F .text	00000028 .hidden __mulsi3
00004630 g       *ABS*	00000000 __ram_rwdata_start
00004630 g       *ABS*	00000000 __ram_rodata_start
00004298 g     F .text	00000158 alt_busy_sleep
0000463c g       *ABS*	00000000 __alt_stack_base
00004630 g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000074 main
00004638 g     O .bss	00000004 alt_envp
00004454 g     F .text	00000084 .hidden __divsi3
00004630 g       *ABS*	00000000 __flash_rodata_start
00004240 g     F .text	00000038 alt_irq_init
00004630 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004630 g       *ABS*	00000000 _edata
0000463c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000044d8 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004410 g     F .text	00000020 alt_icache_flush_all
00004138 g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b18c14 	ori	gp,gp,50736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10918c14 	ori	r2,r2,17968

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d18f14 	ori	r3,r3,17980

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff7a14>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00041380 	call	4138 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041bc0 	call	41bc <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff7a28>

0000405c <main>:
#include <unistd.h>

int main(void)
{
    405c:	defffb04 	addi	sp,sp,-20
    4060:	dfc00415 	stw	ra,16(sp)
    4064:	df000315 	stw	fp,12(sp)
    4068:	df000304 	addi	fp,sp,12
    int *psw = (int*) 0x8000;
    406c:	00a00014 	movui	r2,32768
    4070:	e0bffe15 	stw	r2,-8(fp)
    int *pled = (int*) 0x8010;
    4074:	00a00414 	movui	r2,32784
    4078:	e0bfff15 	stw	r2,-4(fp)
    int count = 64;
    407c:	00801004 	movi	r2,64
    4080:	e0bffd15 	stw	r2,-12(fp)

    while(1)
    {
        usleep(100000);
    4084:	010000b4 	movhi	r4,2
    4088:	2121a804 	addi	r4,r4,-31072
    408c:	00042100 	call	4210 <usleep>
        if (*psw == 0x1)
    4090:	e0bffe17 	ldw	r2,-8(fp)
    4094:	10800017 	ldw	r2,0(r2)
    4098:	10800058 	cmpnei	r2,r2,1
    409c:	1000041e 	bne	r2,zero,40b0 <main+0x54>
            count++; /* Continue 0-ff counting loop. */
    40a0:	e0bffd17 	ldw	r2,-12(fp)
    40a4:	10800044 	addi	r2,r2,1
    40a8:	e0bffd15 	stw	r2,-12(fp)
    40ac:	00000306 	br	40bc <main+0x60>
        else
            count--; /* Continue ff-0 counting loop. */
    40b0:	e0bffd17 	ldw	r2,-12(fp)
    40b4:	10bfffc4 	addi	r2,r2,-1
    40b8:	e0bffd15 	stw	r2,-12(fp)

        *pled = ~count;
    40bc:	e0bffd17 	ldw	r2,-12(fp)
    40c0:	0086303a 	nor	r3,zero,r2
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	10c00015 	stw	r3,0(r2)
    }
    40cc:	003fed06 	br	4084 <_gp+0xffff7a54>

000040d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    40d0:	defffc04 	addi	sp,sp,-16
    40d4:	df000315 	stw	fp,12(sp)
    40d8:	df000304 	addi	fp,sp,12
    40dc:	e13ffd15 	stw	r4,-12(fp)
    40e0:	e17ffe15 	stw	r5,-8(fp)
    40e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    40e8:	e0fffe17 	ldw	r3,-8(fp)
    40ec:	e0bffd17 	ldw	r2,-12(fp)
    40f0:	18800c26 	beq	r3,r2,4124 <alt_load_section+0x54>
  {
    while( to != end )
    40f4:	00000806 	br	4118 <alt_load_section+0x48>
    {
      *to++ = *from++;
    40f8:	e0bffe17 	ldw	r2,-8(fp)
    40fc:	10c00104 	addi	r3,r2,4
    4100:	e0fffe15 	stw	r3,-8(fp)
    4104:	e0fffd17 	ldw	r3,-12(fp)
    4108:	19000104 	addi	r4,r3,4
    410c:	e13ffd15 	stw	r4,-12(fp)
    4110:	18c00017 	ldw	r3,0(r3)
    4114:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4118:	e0fffe17 	ldw	r3,-8(fp)
    411c:	e0bfff17 	ldw	r2,-4(fp)
    4120:	18bff51e 	bne	r3,r2,40f8 <_gp+0xffff7ac8>
    {
      *to++ = *from++;
    }
  }
}
    4124:	0001883a 	nop
    4128:	e037883a 	mov	sp,fp
    412c:	df000017 	ldw	fp,0(sp)
    4130:	dec00104 	addi	sp,sp,4
    4134:	f800283a 	ret

00004138 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4138:	defffe04 	addi	sp,sp,-8
    413c:	dfc00115 	stw	ra,4(sp)
    4140:	df000015 	stw	fp,0(sp)
    4144:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4148:	01800034 	movhi	r6,0
    414c:	31918c04 	addi	r6,r6,17968
    4150:	01400034 	movhi	r5,0
    4154:	29518c04 	addi	r5,r5,17968
    4158:	01000034 	movhi	r4,0
    415c:	21118c04 	addi	r4,r4,17968
    4160:	00040d00 	call	40d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4164:	01800034 	movhi	r6,0
    4168:	31900804 	addi	r6,r6,16416
    416c:	01400034 	movhi	r5,0
    4170:	29500804 	addi	r5,r5,16416
    4174:	01000034 	movhi	r4,0
    4178:	21100804 	addi	r4,r4,16416
    417c:	00040d00 	call	40d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4180:	01800034 	movhi	r6,0
    4184:	31918c04 	addi	r6,r6,17968
    4188:	01400034 	movhi	r5,0
    418c:	29518c04 	addi	r5,r5,17968
    4190:	01000034 	movhi	r4,0
    4194:	21118c04 	addi	r4,r4,17968
    4198:	00040d00 	call	40d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    419c:	00043f00 	call	43f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    41a0:	00044100 	call	4410 <alt_icache_flush_all>
}
    41a4:	0001883a 	nop
    41a8:	e037883a 	mov	sp,fp
    41ac:	dfc00117 	ldw	ra,4(sp)
    41b0:	df000017 	ldw	fp,0(sp)
    41b4:	dec00204 	addi	sp,sp,8
    41b8:	f800283a 	ret

000041bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41bc:	defffe04 	addi	sp,sp,-8
    41c0:	dfc00115 	stw	ra,4(sp)
    41c4:	df000015 	stw	fp,0(sp)
    41c8:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41cc:	0009883a 	mov	r4,zero
    41d0:	00042400 	call	4240 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    41d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    41d8:	00042780 	call	4278 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    41dc:	d0a00017 	ldw	r2,-32768(gp)
    41e0:	d0e00117 	ldw	r3,-32764(gp)
    41e4:	d1200217 	ldw	r4,-32760(gp)
    41e8:	200d883a 	mov	r6,r4
    41ec:	180b883a 	mov	r5,r3
    41f0:	1009883a 	mov	r4,r2
    41f4:	000405c0 	call	405c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    41f8:	0001883a 	nop
    41fc:	e037883a 	mov	sp,fp
    4200:	dfc00117 	ldw	ra,4(sp)
    4204:	df000017 	ldw	fp,0(sp)
    4208:	dec00204 	addi	sp,sp,8
    420c:	f800283a 	ret

00004210 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    4210:	defffd04 	addi	sp,sp,-12
    4214:	dfc00215 	stw	ra,8(sp)
    4218:	df000115 	stw	fp,4(sp)
    421c:	df000104 	addi	fp,sp,4
    4220:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    4224:	e13fff17 	ldw	r4,-4(fp)
    4228:	00042980 	call	4298 <alt_busy_sleep>
}
    422c:	e037883a 	mov	sp,fp
    4230:	dfc00117 	ldw	ra,4(sp)
    4234:	df000017 	ldw	fp,0(sp)
    4238:	dec00204 	addi	sp,sp,8
    423c:	f800283a 	ret

00004240 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4240:	defffd04 	addi	sp,sp,-12
    4244:	dfc00215 	stw	ra,8(sp)
    4248:	df000115 	stw	fp,4(sp)
    424c:	df000104 	addi	fp,sp,4
    4250:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_PD, nios2_PD);
    4254:	00044300 	call	4430 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4258:	00800044 	movi	r2,1
    425c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4260:	0001883a 	nop
    4264:	e037883a 	mov	sp,fp
    4268:	dfc00117 	ldw	ra,4(sp)
    426c:	df000017 	ldw	fp,0(sp)
    4270:	dec00204 	addi	sp,sp,8
    4274:	f800283a 	ret

00004278 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4278:	deffff04 	addi	sp,sp,-4
    427c:	df000015 	stw	fp,0(sp)
    4280:	d839883a 	mov	fp,sp
}
    4284:	0001883a 	nop
    4288:	e037883a 	mov	sp,fp
    428c:	df000017 	ldw	fp,0(sp)
    4290:	dec00104 	addi	sp,sp,4
    4294:	f800283a 	ret

00004298 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    4298:	defffa04 	addi	sp,sp,-24
    429c:	dfc00515 	stw	ra,20(sp)
    42a0:	df000415 	stw	fp,16(sp)
    42a4:	df000404 	addi	fp,sp,16
    42a8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    42ac:	00800244 	movi	r2,9
    42b0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    42b4:	014003f4 	movhi	r5,15
    42b8:	29509004 	addi	r5,r5,16960
    42bc:	e13ffd17 	ldw	r4,-12(fp)
    42c0:	00046080 	call	4608 <__mulsi3>
    42c4:	100b883a 	mov	r5,r2
    42c8:	0100bef4 	movhi	r4,763
    42cc:	213c2004 	addi	r4,r4,-3968
    42d0:	000454c0 	call	454c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    42d4:	100b883a 	mov	r5,r2
    42d8:	01200034 	movhi	r4,32768
    42dc:	213fffc4 	addi	r4,r4,-1
    42e0:	000454c0 	call	454c <__udivsi3>
    42e4:	100b883a 	mov	r5,r2
    42e8:	e13fff17 	ldw	r4,-4(fp)
    42ec:	000454c0 	call	454c <__udivsi3>
    42f0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    42f4:	e0bffe17 	ldw	r2,-8(fp)
    42f8:	10002a26 	beq	r2,zero,43a4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    42fc:	e03ffc15 	stw	zero,-16(fp)
    4300:	00001706 	br	4360 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4304:	00a00034 	movhi	r2,32768
    4308:	10bfffc4 	addi	r2,r2,-1
    430c:	10bfffc4 	addi	r2,r2,-1
    4310:	103ffe1e 	bne	r2,zero,430c <_gp+0xffff7cdc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    4314:	014003f4 	movhi	r5,15
    4318:	29509004 	addi	r5,r5,16960
    431c:	e13ffd17 	ldw	r4,-12(fp)
    4320:	00046080 	call	4608 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    4324:	100b883a 	mov	r5,r2
    4328:	0100bef4 	movhi	r4,763
    432c:	213c2004 	addi	r4,r4,-3968
    4330:	000454c0 	call	454c <__udivsi3>
    4334:	100b883a 	mov	r5,r2
    4338:	01200034 	movhi	r4,32768
    433c:	213fffc4 	addi	r4,r4,-1
    4340:	000454c0 	call	454c <__udivsi3>
    4344:	1007883a 	mov	r3,r2
    4348:	e0bfff17 	ldw	r2,-4(fp)
    434c:	10c5c83a 	sub	r2,r2,r3
    4350:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4354:	e0bffc17 	ldw	r2,-16(fp)
    4358:	10800044 	addi	r2,r2,1
    435c:	e0bffc15 	stw	r2,-16(fp)
    4360:	e0fffc17 	ldw	r3,-16(fp)
    4364:	e0bffe17 	ldw	r2,-8(fp)
    4368:	18bfe616 	blt	r3,r2,4304 <_gp+0xffff7cd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    436c:	014003f4 	movhi	r5,15
    4370:	29509004 	addi	r5,r5,16960
    4374:	e13ffd17 	ldw	r4,-12(fp)
    4378:	00046080 	call	4608 <__mulsi3>
    437c:	100b883a 	mov	r5,r2
    4380:	0100bef4 	movhi	r4,763
    4384:	213c2004 	addi	r4,r4,-3968
    4388:	000454c0 	call	454c <__udivsi3>
    438c:	e17fff17 	ldw	r5,-4(fp)
    4390:	1009883a 	mov	r4,r2
    4394:	00046080 	call	4608 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4398:	10bfffc4 	addi	r2,r2,-1
    439c:	103ffe1e 	bne	r2,zero,4398 <_gp+0xffff7d68>
    43a0:	00000d06 	br	43d8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    43a4:	014003f4 	movhi	r5,15
    43a8:	29509004 	addi	r5,r5,16960
    43ac:	e13ffd17 	ldw	r4,-12(fp)
    43b0:	00046080 	call	4608 <__mulsi3>
    43b4:	100b883a 	mov	r5,r2
    43b8:	0100bef4 	movhi	r4,763
    43bc:	213c2004 	addi	r4,r4,-3968
    43c0:	000454c0 	call	454c <__udivsi3>
    43c4:	e17fff17 	ldw	r5,-4(fp)
    43c8:	1009883a 	mov	r4,r2
    43cc:	00046080 	call	4608 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    43d0:	10bfffc4 	addi	r2,r2,-1
    43d4:	00bffe16 	blt	zero,r2,43d0 <_gp+0xffff7da0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    43d8:	0005883a 	mov	r2,zero
}
    43dc:	e037883a 	mov	sp,fp
    43e0:	dfc00117 	ldw	ra,4(sp)
    43e4:	df000017 	ldw	fp,0(sp)
    43e8:	dec00204 	addi	sp,sp,8
    43ec:	f800283a 	ret

000043f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    43f0:	deffff04 	addi	sp,sp,-4
    43f4:	df000015 	stw	fp,0(sp)
    43f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    43fc:	0001883a 	nop
    4400:	e037883a 	mov	sp,fp
    4404:	df000017 	ldw	fp,0(sp)
    4408:	dec00104 	addi	sp,sp,4
    440c:	f800283a 	ret

00004410 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4410:	deffff04 	addi	sp,sp,-4
    4414:	df000015 	stw	fp,0(sp)
    4418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    441c:	0001883a 	nop
    4420:	e037883a 	mov	sp,fp
    4424:	df000017 	ldw	fp,0(sp)
    4428:	dec00104 	addi	sp,sp,4
    442c:	f800283a 	ret

00004430 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    4430:	deffff04 	addi	sp,sp,-4
    4434:	df000015 	stw	fp,0(sp)
    4438:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    443c:	000170fa 	wrctl	ienable,zero
}
    4440:	0001883a 	nop
    4444:	e037883a 	mov	sp,fp
    4448:	df000017 	ldw	fp,0(sp)
    444c:	dec00104 	addi	sp,sp,4
    4450:	f800283a 	ret

00004454 <__divsi3>:
    4454:	20001b16 	blt	r4,zero,44c4 <__divsi3+0x70>
    4458:	000f883a 	mov	r7,zero
    445c:	28001616 	blt	r5,zero,44b8 <__divsi3+0x64>
    4460:	200d883a 	mov	r6,r4
    4464:	29001a2e 	bgeu	r5,r4,44d0 <__divsi3+0x7c>
    4468:	00800804 	movi	r2,32
    446c:	00c00044 	movi	r3,1
    4470:	00000106 	br	4478 <__divsi3+0x24>
    4474:	10000d26 	beq	r2,zero,44ac <__divsi3+0x58>
    4478:	294b883a 	add	r5,r5,r5
    447c:	10bfffc4 	addi	r2,r2,-1
    4480:	18c7883a 	add	r3,r3,r3
    4484:	293ffb36 	bltu	r5,r4,4474 <_gp+0xffff7e44>
    4488:	0005883a 	mov	r2,zero
    448c:	18000726 	beq	r3,zero,44ac <__divsi3+0x58>
    4490:	0005883a 	mov	r2,zero
    4494:	31400236 	bltu	r6,r5,44a0 <__divsi3+0x4c>
    4498:	314dc83a 	sub	r6,r6,r5
    449c:	10c4b03a 	or	r2,r2,r3
    44a0:	1806d07a 	srli	r3,r3,1
    44a4:	280ad07a 	srli	r5,r5,1
    44a8:	183ffa1e 	bne	r3,zero,4494 <_gp+0xffff7e64>
    44ac:	38000126 	beq	r7,zero,44b4 <__divsi3+0x60>
    44b0:	0085c83a 	sub	r2,zero,r2
    44b4:	f800283a 	ret
    44b8:	014bc83a 	sub	r5,zero,r5
    44bc:	39c0005c 	xori	r7,r7,1
    44c0:	003fe706 	br	4460 <_gp+0xffff7e30>
    44c4:	0109c83a 	sub	r4,zero,r4
    44c8:	01c00044 	movi	r7,1
    44cc:	003fe306 	br	445c <_gp+0xffff7e2c>
    44d0:	00c00044 	movi	r3,1
    44d4:	003fee06 	br	4490 <_gp+0xffff7e60>

000044d8 <__modsi3>:
    44d8:	20001716 	blt	r4,zero,4538 <__modsi3+0x60>
    44dc:	000f883a 	mov	r7,zero
    44e0:	2005883a 	mov	r2,r4
    44e4:	28001216 	blt	r5,zero,4530 <__modsi3+0x58>
    44e8:	2900162e 	bgeu	r5,r4,4544 <__modsi3+0x6c>
    44ec:	01800804 	movi	r6,32
    44f0:	00c00044 	movi	r3,1
    44f4:	00000106 	br	44fc <__modsi3+0x24>
    44f8:	30000a26 	beq	r6,zero,4524 <__modsi3+0x4c>
    44fc:	294b883a 	add	r5,r5,r5
    4500:	31bfffc4 	addi	r6,r6,-1
    4504:	18c7883a 	add	r3,r3,r3
    4508:	293ffb36 	bltu	r5,r4,44f8 <_gp+0xffff7ec8>
    450c:	18000526 	beq	r3,zero,4524 <__modsi3+0x4c>
    4510:	1806d07a 	srli	r3,r3,1
    4514:	11400136 	bltu	r2,r5,451c <__modsi3+0x44>
    4518:	1145c83a 	sub	r2,r2,r5
    451c:	280ad07a 	srli	r5,r5,1
    4520:	183ffb1e 	bne	r3,zero,4510 <_gp+0xffff7ee0>
    4524:	38000126 	beq	r7,zero,452c <__modsi3+0x54>
    4528:	0085c83a 	sub	r2,zero,r2
    452c:	f800283a 	ret
    4530:	014bc83a 	sub	r5,zero,r5
    4534:	003fec06 	br	44e8 <_gp+0xffff7eb8>
    4538:	0109c83a 	sub	r4,zero,r4
    453c:	01c00044 	movi	r7,1
    4540:	003fe706 	br	44e0 <_gp+0xffff7eb0>
    4544:	00c00044 	movi	r3,1
    4548:	003ff106 	br	4510 <_gp+0xffff7ee0>

0000454c <__udivsi3>:
    454c:	200d883a 	mov	r6,r4
    4550:	2900152e 	bgeu	r5,r4,45a8 <__udivsi3+0x5c>
    4554:	28001416 	blt	r5,zero,45a8 <__udivsi3+0x5c>
    4558:	00800804 	movi	r2,32
    455c:	00c00044 	movi	r3,1
    4560:	00000206 	br	456c <__udivsi3+0x20>
    4564:	10000e26 	beq	r2,zero,45a0 <__udivsi3+0x54>
    4568:	28000516 	blt	r5,zero,4580 <__udivsi3+0x34>
    456c:	294b883a 	add	r5,r5,r5
    4570:	10bfffc4 	addi	r2,r2,-1
    4574:	18c7883a 	add	r3,r3,r3
    4578:	293ffa36 	bltu	r5,r4,4564 <_gp+0xffff7f34>
    457c:	18000826 	beq	r3,zero,45a0 <__udivsi3+0x54>
    4580:	0005883a 	mov	r2,zero
    4584:	31400236 	bltu	r6,r5,4590 <__udivsi3+0x44>
    4588:	314dc83a 	sub	r6,r6,r5
    458c:	10c4b03a 	or	r2,r2,r3
    4590:	1806d07a 	srli	r3,r3,1
    4594:	280ad07a 	srli	r5,r5,1
    4598:	183ffa1e 	bne	r3,zero,4584 <_gp+0xffff7f54>
    459c:	f800283a 	ret
    45a0:	0005883a 	mov	r2,zero
    45a4:	f800283a 	ret
    45a8:	00c00044 	movi	r3,1
    45ac:	003ff406 	br	4580 <_gp+0xffff7f50>

000045b0 <__umodsi3>:
    45b0:	2005883a 	mov	r2,r4
    45b4:	2900122e 	bgeu	r5,r4,4600 <__umodsi3+0x50>
    45b8:	28001116 	blt	r5,zero,4600 <__umodsi3+0x50>
    45bc:	01800804 	movi	r6,32
    45c0:	00c00044 	movi	r3,1
    45c4:	00000206 	br	45d0 <__umodsi3+0x20>
    45c8:	30000c26 	beq	r6,zero,45fc <__umodsi3+0x4c>
    45cc:	28000516 	blt	r5,zero,45e4 <__umodsi3+0x34>
    45d0:	294b883a 	add	r5,r5,r5
    45d4:	31bfffc4 	addi	r6,r6,-1
    45d8:	18c7883a 	add	r3,r3,r3
    45dc:	293ffa36 	bltu	r5,r4,45c8 <_gp+0xffff7f98>
    45e0:	18000626 	beq	r3,zero,45fc <__umodsi3+0x4c>
    45e4:	1806d07a 	srli	r3,r3,1
    45e8:	11400136 	bltu	r2,r5,45f0 <__umodsi3+0x40>
    45ec:	1145c83a 	sub	r2,r2,r5
    45f0:	280ad07a 	srli	r5,r5,1
    45f4:	183ffb1e 	bne	r3,zero,45e4 <_gp+0xffff7fb4>
    45f8:	f800283a 	ret
    45fc:	f800283a 	ret
    4600:	00c00044 	movi	r3,1
    4604:	003ff706 	br	45e4 <_gp+0xffff7fb4>

00004608 <__mulsi3>:
    4608:	0005883a 	mov	r2,zero
    460c:	20000726 	beq	r4,zero,462c <__mulsi3+0x24>
    4610:	20c0004c 	andi	r3,r4,1
    4614:	2008d07a 	srli	r4,r4,1
    4618:	18000126 	beq	r3,zero,4620 <__mulsi3+0x18>
    461c:	1145883a 	add	r2,r2,r5
    4620:	294b883a 	add	r5,r5,r5
    4624:	203ffa1e 	bne	r4,zero,4610 <_gp+0xffff7fe0>
    4628:	f800283a 	ret
    462c:	f800283a 	ret
