<?xml version="1.0" encoding="utf-8"?>
<bwFrame xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" default_layout="pxabnsnfns11111101110" textdirection="ltr" device="false" fontscale="100" kbshortcuts="true" skip_nav_enabled="true" outputtype="ap" theme="classic">
  <layouts>
    <layout name="pxabnsnfns11111101110" font="Intel Clear" controllayout="pxabnsnfns11111101110" colorscheme="pxabnsnfns11111101110" string_table="pxabnsnfns11111101110" />
  </layouts>
  <control_options>
    <optiongroups>
      <optiongroup name="sidebaroptions">
        <options>
          <option name="title_enabled" value="true">
            <options>
              <option name="title_text" value="Creating a System Design With Platform Designer: Finish the System" />
            </options>
          </option>
          <option name="logo_enabled" value="true">
            <options>
              <option name="logo_url" value="presentation_content/logo.swf">
                <properties>
                  <property name="width" value="1024" />
                  <property name="height" value="675" />
                </properties>
              </option>
              <option name="html5_logo_url" value="mobile/6SMwWSp4dY1.png" />
            </options>
          </option>
          <option name="sidebar_enabled" value="true">
            <options>
              <option name="sidebarpos" value="left" />
            </options>
          </option>
          <optionlist name="tabs">
            <listitems>
              <listitem name="resources" value="true" group="linkright" />
              <listitem name="customlink" value="true" group="linkright">
                <properties>
                  <property name="title" value="Exit" />
                  <property name="data" value="5s4x54Eajyj" />
                  <property name="ignoreSlideLock" value="true" />
                </properties>
              </listitem>
              <listitem name="outline" value="true" group="sidebar" />
              <listitem name="glossary" value="false" group="sidebar" />
              <listitem name="transcript" value="true" group="sidebar" />
            </listitems>
          </optionlist>
          <option name="time_enabled" value="false">
            <options>
              <option name="time_format" value="totalelapsed" />
            </options>
          </option>
          <option name="info_enabled" value="false">
            <options>
              <option name="default" value="default" />
            </options>
          </option>
          <option name="video_enabled" value="false">
            <options>
              <option name="height" value="135" />
            </options>
          </option>
        </options>
      </optiongroup>
      <optiongroup name="menuoptions">
        <options>
          <option name="flow" value="free" />
          <option name="wraplistitems" value="true" />
          <option name="tooltips" value="true" />
          <option name="autocollapse" value="false" />
          <option name="autonumber" value="true" />
          <option name="levelbehavior" value="reached" />
          <option name="levelrestriction" value="unrestricted" />
          <option name="enableresultsicons" value="false" />
        </options>
      </optiongroup>
      <optiongroup name="controls">
        <options>
          <option name="volume" value="true" />
          <option name="seekbar" value="true">
            <options>
              <option name="readonly" value="false" />
            </options>
          </option>
          <option name="search" value="true" />
          <option name="replay" value="true" />
          <option name="pauseplay" value="true" />
          <option name="enableKeyboardShortcuts" value="true" />
          <option name="elapsedandtotaltime" value="true" />
          <option name="use_fixed_output_size" value="true" />
          <option name="output_size_scale_percent" value="100" />
          <option name="closed_captions" value="false">
            <options>
              <option name="font" value="Open Sans" />
            </options>
          </option>
        </options>
      </optiongroup>
      <optiongroup name="bottombaroptions">
        <options>
          <option name="bottombar_enabled" value="true" />
        </options>
      </optiongroup>
    </optiongroups>
  </control_options>
  <control_layouts>
    <control_layout name="pxabnsnfns11111101110">
      <control name="volume" enabled="true" />
      <control name="seekbar" enabled="true" />
      <control name="replay" enabled="true" />
      <control name="pauseplay" enabled="true" />
      <control name="logo" enabled="true" />
      <control name="previous" enabled="true" />
      <control name="next" enabled="true" />
      <control name="swipeleft" enabled="true" />
      <control name="swiperight" enabled="true" />
      <control name="submit" enabled="false" />
      <control name="finish" enabled="false" />
      <control name="submitall" enabled="false" />
      <control name="resources" enabled="true" />
      <control name="glossary" enabled="false" />
      <control name="transcript" enabled="true" />
      <control name="outline" enabled="true">
        <controls>
          <control name="search" enabled="true" />
        </controls>
      </control>
      <control name="close_btn" enabled="false" />
    </control_layout>
  </control_layouts>
  <colorschemes>
    <colorscheme name="pxabnsnfns11111101110">
      <color_group name="infopanel">
        <group_colors>
          <color name="link_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x7C2280" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="link_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x0000EE" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="name_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="title_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x999999" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="infopanelpopup">
        <group_colors>
          <color name="link_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x7C2280" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="link_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x0000EE" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE9E9E9" alpha="100" stop="0" />
                <color rgb="0xCFCFCF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="name_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bio_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x999999" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="timer">
        <group_colors>
          <color name="duration">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x00D7FF" alpha="100" stop="0" />
                <color rgb="0x00ABFF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="elapsed">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFEE347" alpha="100" stop="0" />
                <color rgb="0xFCCC2A" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="stroke">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC7C7C7" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="inner">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="window">
        <group_colors>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="inner">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xEAEAEA" alpha="100" stop="0" />
                <color rgb="0xCFCFCF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF3F3F3" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="diva">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF7F7F7" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="divb">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xD3D3D3" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x000000" alpha="20" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="editor">
        <group_colors>
          <color name="slide_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="html_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF5F5F5" alpha="100" stop="0" />
                <color rgb="0xC7C7C7" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="btn_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF2F2F2" alpha="100" stop="0" />
                <color rgb="0xAFAFAF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="btn_down">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC7C7C7" alpha="100" stop="0" />
                <color rgb="0xF4F4F4" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="btn_border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB1B1B1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_text_shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF0F0F0" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="listitem">
        <group_colors>
          <color name="selected_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="lines">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xDFDFDF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE6E6E6" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="viewed">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x909090" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="selected">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC0E2F1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="base">
        <group_colors>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="diva">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xD3D3D3" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="divb">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF7F7F7" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE9E9E9" alpha="100" stop="0" />
                <color rgb="0xCFCFCF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE9E9E9" alpha="100" stop="0" />
                <color rgb="0xF3F3F3" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="menu_shade">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xDBDBDB" alpha="100" stop="0" />
                <color rgb="0xC3C3C3" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="slide_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE9E9E9" alpha="100" stop="0" />
                <color rgb="0xCFCFCF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="button">
        <group_colors>
          <color name="btn_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF5F5F5" alpha="100" stop="0" />
                <color rgb="0xC7C7C7" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="btn_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF2F2F2" alpha="100" stop="0" />
                <color rgb="0xAFAFAF" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="btn_down">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC7C7C7" alpha="100" stop="0" />
                <color rgb="0xF4F4F4" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="btn_border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB1B1B1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_text_shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF0F0F0" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_icon_color">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_glow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xCFCFCF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="checkbox">
        <group_colors>
          <color name="border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="check">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x33CC00" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x6BF8FF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="logo">
        <group_colors>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="menu">
        <group_colors>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF3F3F3" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="scrollarea">
        <group_colors>
          <color name="bg">
            <fill type="linear" rotation="0">
              <colors>
                <color rgb="0xDEDEDE" alpha="100" stop="0" />
                <color rgb="0xE8E8E8" alpha="100" stop="128" />
              </colors>
            </fill>
          </color>
          <color name="border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF6F6F6" alpha="100" stop="0" />
                <color rgb="0xF3F3F3" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="button_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC4C4C4" alpha="100" stop="0" />
                <color rgb="0xB2B2B2" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="button_inner">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xCBCBCB" alpha="100" stop="0" />
                <color rgb="0xBABABA" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="button_border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="icons">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xD9D9D9" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="detaila">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xA7A7A7" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="detailb">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xCFCFCF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="searchinput">
        <group_colors>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xDFDFDF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xADADAD" alpha="100" stop="0" />
                <color rgb="0xFAFAFA" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="icon">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x8A8A8A" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="button_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF5F5F5" alpha="100" stop="0" />
                <color rgb="0xC7C7C7" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="hover_glow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x6BF8FF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="search_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x8A8A8A" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bg_active">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFAFAFA" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="text_active">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x333333" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="seekcontrol">
        <group_colors>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF5F5F5" alpha="100" stop="0" />
                <color rgb="0xC7C7C7" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB1B1B1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="seek_border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xB8B8B8" alpha="100" stop="0" />
                <color rgb="0xEEEEEE" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
          <color name="seek_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE7E7E7" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="seek_position">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_icon_color">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x2D2D2D" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_icon_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="btn_icon_shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF0F0F0" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="tabs">
        <group_colors>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF3F3F3" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x555555" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="selected">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x333333" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x333333" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="shadow">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF0F0F0" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="transcript">
        <group_colors>
          <color name="div">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE1E1E1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="heading_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="outline">
        <group_colors>
          <color name="diva">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC6C6C6" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="divb">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF9F9F9" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="divc">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE1E1E1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="search_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="search_hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x0000EE" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="resource">
        <group_colors>
          <color name="separator">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE0E0E0" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="glossary">
        <group_colors>
          <color name="selected_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="selected">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC0E2F1" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x353535" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="hover">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE6E6E6" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="diva">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE2E2E2" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="divb">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE2E2E2" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="divc">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFAFAFA" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xE7E7E7" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="heading_text">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0x444444" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="volume">
        <group_colors>
          <color name="thumb_border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xA5A5A5" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="thumb_inner">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xD4D4D4" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="thumb_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xC8C8C8" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="slider_border">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xF2F2F2" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
          <color name="slider_bg">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xBCBCBC" alpha="100" stop="0" />
                <color rgb="0xBCBCBC" alpha="100" stop="128" />
                <color rgb="0xC3C3C3" alpha="100" stop="255" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
      <color_group name="HTML">
        <group_colors>
          <color name="htmlpage_bg_color">
            <fill type="linear" rotation="90">
              <colors>
                <color rgb="0xFFFFFF" alpha="100" stop="0" />
              </colors>
            </fill>
          </color>
        </group_colors>
      </color_group>
    </colorscheme>
  </colorschemes>
  <string_tables>
    <string_table name="pxabnsnfns11111101110">
      <string id="check_include">Check to include</string>
      <string id="clear">Clear and return to Menu</string>
      <string id="close">Close</string>
      <string id="acc_closed_captions">تعليقات توضيحية مغلقة. اضغط على مفتاح المسافة للتبديل بين تشغيل التعليقات التوضيحية وإيقافها.</string>
      <string id="continue">متابعة</string>
      <string id="continueresponsive">متابعة</string>
      <string id="exit">Exit</string>
      <string id="filter">Filter</string>
      <string id="finish">FINISH</string>
      <string id="acc_finish">finish</string>
      <string id="definition">Definition</string>
      <string id="acc_definition">definition</string>
      <string id="glossary">Glossary</string>
      <string id="terms">Terms</string>
      <string id="outline">Menu</string>
      <string id="disabled_orientation">الرجاء قم بتدوير جهازك</string>
      <string id="next">NEXT</string>
      <string id="acc_next">next</string>
      <string id="transcript_chk">Notes</string>
      <string id="transcript">Notes</string>
      <string id="bio">Bio</string>
      <string id="more_info">More info</string>
      <string id="closed_captions">تعليقات توضيحية</string>
      <string id="acc_pause">pause</string>
      <string id="acc_play">play</string>
      <string id="send_an_email">Send an email</string>
      <string id="prev">PREV</string>
      <string id="acc_previous">previous</string>
      <string id="question_list">Question List</string>
      <string id="acc_replay">replay</string>
      <string id="resources">Resources</string>
      <string id="acc_resources">resources</string>
      <string id="restart">إعادة تشغيل</string>
      <string id="search">Search...</string>
      <string id="acc_search_input">search</string>
      <string id="search_in">Search in:</string>
      <string id="search_results">Search Results</string>
      <string id="acc_skipnavigation">.تخطي التنقل. اضغط على إدخال للرجوع إلى الشريحة</string>
      <string id="slide_text_chk">Slide Text</string>
      <string id="submitall">SUBMIT ALL</string>
      <string id="acc_submitall">submit all</string>
      <string id="submit">SUBMIT</string>
      <string id="acc_submit">submit</string>
      <string id="acc_volume">volume</string>
    </string_table>
  </string_tables>
  <fonts>
    <font name="Intel Clear">
      <files>
        <file bold="true" italic="false" />
        <file bold="false" italic="false" />
      </files>
    </font>
    <font name="Arial">
      <files>
        <file bold="false" italic="false" />
        <file bold="false" italic="true" />
      </files>
    </font>
    <font name="Times New Roman">
      <files>
        <file bold="false" italic="false" />
      </files>
    </font>
  </fonts>
  <sounds enabled="true" />
  <nav_data>
    <outline>
      <links>
        <slidelink slideid="5wJCT5nQceD.321" displaytext="Creating a System Design with Platform Designer" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.322" displaytext="Agenda and Objectives" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.410" displaytext="Supplemental Lab Files" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.340" displaytext="Connection Details" expand="false" type="slide">
          <links>
            <slidelink slideid="5wJCT5nQceD.386" displaytext="Clocks" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.387" displaytext="Clock Domains and Domain Filtering" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.388" displaytext="Clock Domain Crossings" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.389" displaytext="Reset Control Options" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.390" displaytext="Reset Connection Points" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.391" displaytext="Reset Domain Filtering" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.392" displaytext="Reset Adapter Insertion" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.393" displaytext="Conduit Interfaces" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.394" displaytext="Memory-Mapped Addressing" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.395" displaytext="Address Map Tab" expand="true" type="slide" />
          </links>
        </slidelink>
        <slidelink slideid="5wJCT5nQceD.349" displaytext="Review Connections" expand="false" type="slide">
          <links>
            <slidelink slideid="5wJCT5nQceD.350" displaytext="System Review and Modification" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.396" displaytext="System Editing on System Contents tab" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.397" displaytext="Basic Filtering" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.398" displaytext="Device Family and Interconnect Requirements Tabs" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.399" displaytext="Messages Tab" expand="true" type="slide" />
          </links>
        </slidelink>
        <slidelink slideid="5wJCT5nQceD.354" displaytext="Generate HDL for System" expand="false" type="slide">
          <links>
            <slidelink slideid="5wJCT5nQceD.401" displaytext="System Generation" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.400" displaytext="HDL Instantation Template" expand="true" type="slide" />
          </links>
        </slidelink>
        <slidelink slideid="5wJCT5nQceD.357" displaytext="Basic Platform Designer System Building Flow Review" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.402" displaytext="Intel® Quartus® Prime Design Flow" expand="false" type="slide">
          <links>
            <slidelink slideid="5wJCT5nQceD.403" displaytext="FPGA Hardware Design Flow" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.404" displaytext="Platform Designer System Design Flow" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.405" displaytext="Platform Designer System Design Flow (cont.)" expand="true" type="slide" />
            <slidelink slideid="5wJCT5nQceD.406" displaytext="Platform Designer System Design Flow (cont.)" expand="true" type="slide" />
          </links>
        </slidelink>
        <slidelink slideid="5wJCT5nQceD.363" displaytext="Course Summary" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.409" displaytext="End of Part 2" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.407" displaytext="For More Information: Documentation" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.408" displaytext="For More Information: Training" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.365" displaytext="Many Ways to Learn" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.366" displaytext="Intel® FPGA Technical Support Resources" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.367" displaytext="Give us your feedback" expand="true" type="slide" />
        <slidelink slideid="5wJCT5nQceD.368" displaytext="Legal Disclaimers/Acknowledgements" expand="true" type="slide" />
      </links>
    </outline>
    <search>
      <slidetext slideid="5wJCT5nQceD.321" slidebank="false" type="slide">  creating a system design with platform designer online training</slidetext>
      <slidetext slideid="5wJCT5nQceD.322" slidebank="false" type="slide">    programmable solutions group 2 agenda and objectives platform designer user interface (ui)create a system targeting an fpga using platform designerplatform designer design flowincorporate platform designer into the intel® quartus® prime design flow</slidetext>
      <slidetext slideid="5wJCT5nQceD.410" slidebank="false" type="slide">    programmable solutions group 3 supplemental lab files experiment with platform designer and try out a working design on a boardlab exercise manual in .pdf formatlab exercise files (.zip)hardware implementation requires terasic* c5g cyclone® v gx starter kitgo to resources above for links and to download files (may need to hold ctrl to download) </slidetext>
      <slidetext slideid="5wJCT5nQceD.340" slidebank="false" type="slide">    programmable solutions group 4 connection details clocksresetsconduitsmemory-mapped interface addressing</slidetext>
      <slidetext slideid="5wJCT5nQceD.386" slidebank="false" type="slide">    programmable solutions group  5 clocks all transactions in a system are synchronous, so all components require a clock new .qsys files include clock source component (clock aggregator)optional; can be removedconnect two interfacesclock input interface fed from outside system (export)clock output interface connects to clock input interfaces of other system componentsclock column for quick clock signal connections   click to select clock from list  </slidetext>
      <slidetext slideid="5wJCT5nQceD.387" slidebank="false" type="slide">    programmable solutions group 6 clock domains and domain filtering highlight and/or filter all components/interfaces in a particular clock domain  clocks resets   view menu → clock domains - beta  display only interfaces in selected domain     use       to turn off </slidetext>
      <slidetext slideid="5wJCT5nQceD.388" slidebank="false" type="slide">    programmable solutions group 7 clock domain crossings highlight connections where clock adapters must be added to interconnectred dots indicate locationtooltip helps understand why adapter requiredaccept use of adapter or fix    button_switch slave is accidentally in different clock domain from master (indicated by coloring)   </slidetext>
      <slidetext slideid="5wJCT5nQceD.389" slidebank="false" type="slide">    programmable solutions group 8 reset control options platform designer allows for complete control over the system’s reset implementationcan choose to reset all (system menu → create global reset network) or only subset of the components in systemmust use care to avoid reset loops and system lockupexample: slave reset in middle of transaction, master waits foreverreset interfaces declared independent of clock interfacebut always associated with a clock interfacereset synchronized to associated clockmultiple resets can enter the system, like clocksuse reset controller or reset sequencer for advanced management</slidetext>
      <slidetext slideid="5wJCT5nQceD.390" slidebank="false" type="slide">    programmable solutions group    9 reset connection points clock source component as reset aggregator;external reset input interface (exported)  reset input synchronized to clock interface named clock    system menu → create global reset networkauto connect all reset inputs to single reset output</slidetext>
      <slidetext slideid="5wJCT5nQceD.391" slidebank="false" type="slide">    programmable solutions group  10 reset domain filtering highlight and/or filter all components/interfaces in a particular reset domain  clocks resets view menu → reset domains - beta display only interfaces in selected domain      use       to turn off </slidetext>
      <slidetext slideid="5wJCT5nQceD.392" slidebank="false" type="slide">    programmable solutions group 11 reset adapter insertion like clock domain crossings, adapters automatically added and highlighted in filtered reset domainsred dots indicate locationtooltip helps understand why adapter requiredmultiple reset outputs connected to single inputresets associated with different clock domainsreset output/input have different synchronicity  master_reset is asynchronous from jtag to avalon® master bridge  </slidetext>
      <slidetext slideid="5wJCT5nQceD.393" slidebank="false" type="slide">    programmable solutions group 12 conduit interfaces components use conduit interfaces for any individual or grouped signals that don’t conform to a supported standard interfacerecall the supported standard interfaces: avalon®, arm* amba* axi standardfor custom components, user must manually specify signals that make up conduitlike conduits can be connected in the uisame signals with opposite directionsmost often exported outside systemview signals that make up conduit in hierarchy or block symbol (component schematic block view) tabs  </slidetext>
      <slidetext slideid="5wJCT5nQceD.394" slidebank="false" type="slide">    programmable solutions group 13 memory-mapped addressing each memory-mapped master interface has own address mapmaximum 64-bit address space for each master interface master address map is a collection of:connected slave interface base addressesconnected slave interface address spans (determines end address; spans cannot overlap)lowest to highest slave addresses make up the address space of the mastermanually assign non-overlapping base addresses or use system menu → assign base addresses   master interface  address map based on connected slaves (0x0 to 0x6f)   lock to prevent auto-assignment </slidetext>
      <slidetext slideid="5wJCT5nQceD.395" slidebank="false" type="slide">    programmable solutions group  address map tab 14 use address map tab to manage all addressingdouble-click cell to manually edit slave base addressingsupports per-master addressing for shared slavessingle slave can be represented by different address ranges for different masters  master interfaces    slave interfaces   </slidetext>
      <slidetext slideid="5wJCT5nQceD.349" slidebank="false" type="slide">    programmable solutions group 15 basic platform designer system building flow select and configure components from ip catalogconnect component interfaces togetherreview connectionsgenerate hdl for system</slidetext>
      <slidetext slideid="5wJCT5nQceD.350" slidebank="false" type="slide">    programmable solutions group 16 parameters tabdisplays parameter editor settingsedit parameter values without directly opening component parameter editorschematic tabdisplays schematic of connected systemreview, connect, disconnect, or export component interfaces block symbol tabview block diagram of the entire platform designer system or the selected componentall exported interfaces appear as port connectionshierarchy tabreview system, component, interface, and connection detailsoverall system hierarchytop-level system connectionscomponent interfaces and signalsconnections between components system review and modification</slidetext>
      <slidetext slideid="5wJCT5nQceD.396" slidebank="false" type="slide">    programmable solutions group  17 system editing on system contents tab remove components from systemhighlight component and click buttonhighlight component and press delete keychange order of components in systemmove to top/bottom, move up/downmake system and component connections more easily understandabledoes not change addressing or connections    </slidetext>
      <slidetext slideid="5wJCT5nQceD.397" slidebank="false" type="slide">    programmable solutions group 18 basic filtering filter what you see in system contents by component name, interface type, or connection source/destinationdefault filter is all components and all interfaces select pre-defined filters by right-clicking on any component or interface in system contentscreate new custom filters by clicking on filters button and defining filter criteriaremove filters with     list of built-in and cusom filters </slidetext>
      <slidetext slideid="5wJCT5nQceD.398" slidebank="false" type="slide">    programmable solutions group  19 device family and interconnect requirements tabs specify general settings for the entire system device info brought in if .qsys file created from open intel® quartus® prime software project(required in pro edition) add pipeline stages in interconnect for performance handshake, fifo, or auto select for clock crossing logic    specify other settings for whole system or individual interfaces;see intel quartus prime software handbook for details </slidetext>
      <slidetext slideid="5wJCT5nQceD.399" slidebank="false" type="slide">    programmable solutions group 20 messages tab review error, warning, and informational messages about the systemincludes summary of errors, if any, and warning countsdouble-click message to highlight referenced interface/connectionmust be “clean” (no errors) in order to generate </slidetext>
      <slidetext slideid="5wJCT5nQceD.354" slidebank="false" type="slide">    programmable solutions group 21 basic platform designer system building flow select and configure components from ip catalogconnect component interfaces togetherreview connectionsgenerate hdl for system</slidetext>
      <slidetext slideid="5wJCT5nQceD.401" slidebank="false" type="slide">    programmable solutions group  22 system generation when you’ve finished building your system, generate the files required for synthesis or simulationchoose file types to generate and hdl languagechoose output directory (default is subdirectory named after .qsys file)click generate generate menu → generate hdl</slidetext>
      <slidetext slideid="5wJCT5nQceD.400" slidebank="false" type="slide">    programmable solutions group hdl instantation template 23 display a verilog or vhdl instantiation template based on exported interfaces to easily instantiate system in an intel® quartus® prime software project generate menu → show instantiation template  </slidetext>
      <slidetext slideid="5wJCT5nQceD.357" slidebank="false" type="slide">    programmable solutions group 24 basic platform designer system building flow select and configure components from ip catalogconnect component interfaces togetherreview connectionsgenerate hdl for system</slidetext>
      <slidetext slideid="5wJCT5nQceD.402" slidebank="false" type="slide">  creating a system design with platform designer intel® quartus® prime design flow</slidetext>
      <slidetext slideid="5wJCT5nQceD.403" slidebank="false" type="slide">    programmable solutions group 26 fpga hardware design flow synthesistranslate design into device specific primitivesoptimization to meet required area &amp; performance constraintsintel® quartus® prime software or other  supported synthesis tools design specification place &amp; routemap primitives to specific locations insidetarget technology with reference to area &amp; performance constraintsspecify routing resources to be used     design entry/rtl codingbehavioral or structural description of design      le  mlab  m10k   i/o   platform designer   platform designer    rtl simulationfunctional simulationverify logic model &amp; data flow               	      (no timing delays)  </slidetext>
      <slidetext slideid="5wJCT5nQceD.404" slidebank="false" type="slide">    programmable solutions group 27 platform designer system design flow it’s easy to integrate a platform designer system into an intel® quartus® prime software projectcreate a system, making sure to target correct devicestandard edition: device set correctly if pd started from open projectpro edition: system must be associated with a project when createddecide what will be top-level project entity and where system will exist in hierarchytop-level platform designer system: set top-level entity to system name and add .qsys or .qip file to project (see next step)lower in project hierarchy in other design file (.v, .vhd, etc.): instantiate system in file using instantiation templaterequired if i/o pin names are to be different from exported signal names</slidetext>
      <slidetext slideid="5wJCT5nQceD.405" slidebank="false" type="slide">    programmable solutions group 28 platform designer system design flow (cont.) either generate system files manually or allow intel® quartus® prime software compile generate during synthesisgenerate manually: generate menu → generate hdlplaced by default into &lt;system name&gt;/synthesis subdirectoryadd either .qsys or .qip (intel quartus prime ip) file to projectcan add only one or the other.qsys: system generated automatically every time project is compiled (synthesized).qip: adds all required generated hdl files to project but system must be manually generated before project compilation to create all files (including .qip)</slidetext>
      <slidetext slideid="5wJCT5nQceD.406" slidebank="false" type="slide">    programmable solutions group 29 platform designer system design flow (cont.) constrain design: timing constraints (.sdc), i/o locations, &amp; other assignments added to .qsfmany off-the-shelf components and the system generate their own .sdc pointed to by .qipstill should create top-level .sdc for clock inputs to system (create_clock, create_generated_clock) and for pll-generated clocks in system (derive_pll_clocks)compile designuse platform designer to make changes to system, rather than editing the generated hdl</slidetext>
      <slidetext slideid="5wJCT5nQceD.363" slidebank="false" type="slide">    programmable solutions group 30 course summary platform designer provides an easy-to-use user interface for building and analyzing a system targeting an fpgaplatform designer fits seamlessly into the basic intel® quartus® prime software design flow</slidetext>
      <slidetext slideid="5wJCT5nQceD.409" slidebank="false" type="slide">    programmable solutions group 31 end of part 2 to continue the training, check out:part 1: creating a system design with platform designer: getting startedhttps://www.altera.com/support/training/course/oqsyscreate.html</slidetext>
      <slidetext slideid="5wJCT5nQceD.407" slidebank="false" type="slide">    programmable solutions group 32 for more information: documentation built-in help menus (intel quartus prime software and platform designer)intel® quartus® prime software handbookvolume 1 chapterscreating a system with platform designer (standard)platform designer (standard) system design componentshttps://www.altera.com/content/dam/altera-www/global/en_us/pdfs/literature/hb/qts/qts-qps-handbook.pdfavalon® interface specificationhttps://www.altera.com/content/dam/altera-www/global/en_us/pdfs/literature/manual/mnl_avalon_spec.pdfarm* amba* axi specificationhttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.set.amba/index.htmlembedded peripheral ip user guidehttps://www.altera.com/content/dam/altera-www/global/en_us/pdfs/literature/ug/ug_embedded_ip.pdf</slidetext>
      <slidetext slideid="5wJCT5nQceD.408" slidebank="false" type="slide">    programmable solutions group 33 for more information: training free online trainingshttps://www.altera.com/support/training/catalog.html?coursetype=online&amp;language=english&amp;keywords=qsyshighlight: platform designer in the intel® quartus® prime pro edition softwarehttps://www.altera.com/support/training/course/oqsyspro.htmlfocuses on features found only in the intel quartus prime software pro edition platform designerinstructor-led/virtual trainingintroduction to the platform designer system integration toolhttps://www.altera.com/support/training/course/iqsys101.htmladvanced platform designer system integration tool methodologieshttps://www.altera.com/support/training/course/iqsys102.html</slidetext>
      <slidetext slideid="5wJCT5nQceD.365" slidebank="false" type="slide">    programmable solutions group 34 many ways to learn  videos online training virtual classes  instructor-led training freealways available~30 minutes long&gt;200 topicsenglish, chinese, japanese in-personask questions to intel­® fpga experthands on labs1 day longclass schedules at www.altera.com/training  freealways available~4 minutes longyoutube videos live over webex* training centerask questions to intel® fpga experthands on labstaught in ½ day sessionsclass schedules at www.altera.com/training   </slidetext>
      <slidetext slideid="5wJCT5nQceD.366" slidebank="false" type="slide">    programmable solutions group 35 intel® fpga technical training materialsintel programmable solutions group (psg) community forum for self-help  intel psg wiki site for design examples intel psg knowledge base solutionsintel psg self service licensing centerplease contact your sales and field support if you need further assistance intel® fpga technical support resources </slidetext>
      <slidetext slideid="5wJCT5nQceD.367" slidebank="false" type="slide">    programmable solutions group 36 give us your feedback when you registered for this training you received a confirmation emailplease click on the link in the email to complete a short surveyyour feedback is important to help us improve future trainings!thank you!</slidetext>
      <slidetext slideid="5wJCT5nQceD.368" slidebank="false" type="slide">    programmable solutions group legal disclaimers/acknowledgements intel technologies’ features and benefits depend on system configuration and may require enabled hardware, software or service activation. performance varies depending on system configuration. check with your system manufacturer or retailer or learn more at www.intel.com.intel, the intel logo, intel inside, the intel inside logo, max, stratix, cyclone, arria, quartus, hyperflex, intel atom, intel xeon and enpirion are trademarks of intel corporation or its subsidiaries in the u.s. and/or other countries.opencl is the trademark of apple inc. used by permission by khronos*other names and brands may be claimed as the property of others© intel corporation 37</slidetext>
      <slidetext slideid="5wJCT5nQceD.369" slidebank="false" type="slide"> </slidetext>
    </search>
  </nav_data>
  <resource_data description="&lt;p align='left'&gt;&lt;font face='Intel Clear' style='font-size: 11px;' size='11' color='#444444'&gt;Here are some useful links and documents:&lt;/font&gt;&lt;/p&gt;">
    <resources>
      <resource url="http://www.altera.com/customertraining/webex/PD_Sys_Creation_p2/Create_System_with_PD.pdf" image="presentation_content/url.png" title="Lab exercise manual" />
      <resource url="http://www.altera.com/customertraining/webex/Create_System_with_Platform_Designer.zip" image="presentation_content/url.png" title="Lab exercise files" />
      <resource url="http://dl.altera.com/?edition=standard" image="presentation_content/url.png" title="Intel® Quartus® Prime Standard Edition Software download" />
      <resource url="https://www.altera.com/solutions/partners/partner-profile/terasic-inc-/board/cyclone-v-gx-starter-kit.html" image="presentation_content/url.png" title="Intel® FPGA page for Terasic Cyclone® V GX starter kit" />
      <resource url="http://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&amp;CategoryNo=165&amp;No=830" image="presentation_content/url.png" title="Terasic page for Cyclone® V GX Starter Kit" />
    </resources>
  </resource_data>
  <transcript_data>
    <slidetranscripts>
      <slidetranscript slideid="5wJCT5nQceD.321" slidebank="false" type="slide" noteswf="presentation_content/notes/321.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Welcome to this online training about creating a system design with Platform Designer, formerly known as Qsys.  My name is Steve.  This training is available for desktop viewing, as well as in a format compatible with portable devices, both available from the same link included in your registration email.  For either version, while watching the training, use the controls at the bottom and side of the screen to navigate to any point.  Feel free to pause the training at any time to experiment with the software.  When you are done with the training, please use the link provided in the registration email you were sent to provide us feedback on the training and ways in which it can be improved.  I’ll remind you about that later.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.322" slidebank="false" type="slide" noteswf="presentation_content/notes/322.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;By the end of this training, you will know how to use the Platform Designer user interface to create a system design for implementation in an Intel FPGA device.  Along with this, you will see how Platform Designer fits into the Intel Quartus Prime software design flow as another method of design entry.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.410" slidebank="false" type="slide" noteswf="presentation_content/notes/410.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;This online training includes a supplemental lab exercise.  It includes a lab exercise manual and lab exercise files for use with the Standard Edition of the Intel&amp;#174; Quartus&amp;#174; Prime software, version 17.1.  If you’d like, you can pause the training here and go to the Resources in the upper right corner of this browser window to download these files now and learn more about the development kit required for running the lab design in hardware.  Make sure your pop-up blocker is turned off.  You may need to hold the ctrl key to download the files.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.340" slidebank="false" type="slide" noteswf="presentation_content/notes/340.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;All system connections between all interface types are made by means of the connection methods just discussed.  Unconnected, non-exported interfaces will be flagged with warning or error messages, depending on the type of interface.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;To finish up this discussion, let&amp;#39;s look at some details regarding specific types of connections, namely clocks, resets, conduits, and memory-mapped interface addressing.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.386" slidebank="false" type="slide" noteswf="presentation_content/notes/386.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;As mentioned earlier, all components include at least one clock interface because all transactions between components are synchronous.  To simplify the process of setting up clocks for all components in the system, you can use a Clock Source component.  All new .qsys files include a Clock Source component.  However, you can remove the component if you don’t want to use it.  The Clock Source component is essentially a clock interface aggregator.  It is used to distribute a single, external clock that enters the system to the clock interfaces of other components in the system.  Without a Clock Source component, the clock input interfaces of all components in the system would need to be exported individually to connect to the external clock.  Double-click the component to open its parameter editor and specify the clock frequency.  This is used for clock constraints to help close timing in the system design.  You can add additional Clock Source components if your system uses multiple incoming clocks.  If a component has a unique, non-shared clock interface that connects directly to an external clock source, then just export that interface directly.  A Clock Source component is not needed.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Each Clock Source component has a clock input interface and a clock output interface.  The clock input is exported out of the system, by default, to connect to an external clock.  You can connect the clock input interface to external sources like a clock oscillator device on your board or an FPGA PLL that resides outside the system.  The clock output interface is then connected to the clock input interfaces of all the components that use this clock.  Use any of the connection strategies from the previous slides to make or break the connections.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Another way to make clock connections is to use the Clock column in the System Contents tab.  For any clock input interfaces in the system, click in the Clock column to get a drop-down list of clock output interfaces in the system.  Select which clock you want as the source for this interface.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.387" slidebank="false" type="slide" noteswf="presentation_content/notes/387.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;To manage the different clock domains in your system, open the Clock Domains tab from the View menu.  This tab displays clock domains as hierarchical regions with each component and that component&amp;#39;s interfaces in that clock region displayed underneath.  By selecting a particular clock domain or multiple clock domains in the tab, the System Contents tab can be filtered, displaying only the components being clocked by the selected domains.  When selecting a domain, the System Contents tab also displays colors to show which interfaces belong to which clock domains.  You can further filter the System Contents tab to display only the component interfaces in the domain, in case a single component has interfaces in multiple domains.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.388" slidebank="false" type="slide" noteswf="presentation_content/notes/388.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;If there are multiple clock domains in your system, the Clock Domains tab also shows the location of any clock crossing logic being implemented.  Platform Designer automatically adds clock crossing adapter logic to the interconnect where needed.  If you select a clock domain crossing from the group at the top of the Clock Domains tab, red dots in the System Contents tab indicate where the tool will add an adapter.  When hovering over these dots, tooltips provide details about why the adapter is required.  You can choose to allow the adapter to be inserted, or you can make adjustments to the design to avoid its creation.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;In the example shown here, the slave interface, named buttonreg, is part of a component that is controlled by a clock that is different from the clock used for the master interface, named avalon_master.  Again, this may be OK for the design, but if timing issues are found in the clock domain crossing, using the same clock for both the master and slave may fix the issue.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.389" slidebank="false" type="slide" noteswf="presentation_content/notes/389.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Reset interfaces in Platform Designer are separate from clock interfaces, though they are always associated with a particular clock domain.  External resets enter the system just like clocks, optionally through a Clock Source component.   When specifying the parameters for the Clock Source component, you can explicitly control the synchronization of the reset with respect to the clock signal of that component.  Resets can also be generated by other components in the system.  They can provide reset control to the system through a reset output interface.&lt;br&gt;&lt;/font&gt; &lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;For connecting resets, you can use one of two methods.  The simpler method is to use a global reset.  To do this, select the Create Global Reset Network option from the System menu.  With this option, Platform Designer automatically OR’s all reset input interfaces, synchronizes them to each clock domain and connects them to all reset output interfaces.  The exception to this would be any reset input interface that has been exported, such as the reset input interface of a Clock Source component.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;You can also choose to make arbitrary connections between reset input and output interfaces, giving you complete control over resetting individual components in the system.  With this method, you individually connect specific reset output interfaces to specific reset input interfaces.  With this configuration, a given component can be reset by only a subset of all the reset sources in the system.  If this method is used, care must be taken to avoid reset loops or reset situations that can cause system lockup, such as asserting a slave interface reset in the middle of a transaction.  If you have multiple external resets entering the system through multiple Clock Source components, you can use a reset controller or reset sequencer to manage them.  See the Intel&amp;#174; Quartus&amp;#174; Prime handbook for details on these components.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.390" slidebank="false" type="slide" noteswf="presentation_content/notes/390.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;In the example shown here, resets are being hooked up manually.  The reset input interface of the Clock Source component is exported to connect to an external reset signal.  The reset output interface of the Clock Source component is connected to the reset input interfaces of components in the rest of the system.  For all reset interfaces as well as other non-clock interfaces, the Clock column indicates which clock interface on a component is the clock used for synchronization of that interface.  For example, the highlighted button_debounce_in reset input interface is synchronized by the clock input interface, named clock, on the reset_debounce component.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.391" slidebank="false" type="slide" noteswf="presentation_content/notes/391.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Similar to the Clock Domains tab, you can open the Reset Domains tab from the View menu to see which components and interfaces are in which reset domains.  This is particularly helpful if you have made your own specific reset connections instead of using the global reset option.  Again, you can enable further filtering to display only reset interfaces instead of all interfaces for each component.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;One difference from the Clock Domains tab is that if you select multiple reset domains, the System Contents tab will display only the components and interfaces that are connected to both domains instead of just those connected to either domain.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.392" slidebank="false" type="slide" noteswf="presentation_content/notes/392.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Similar to viewing clock crossing adapters, you can see where reset synchronizers have been inserted in the system by selecting a domain crossing from the Reset Domains tab.  Again, red dots on the System Contents tab indicate their locations and tooltips indicate why an adapter is required.  &lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The three situations listed are the reasons why an adapter will be inserted.  As with clock domain crossings, you can leave the adapter in place or make adjustments to the design to avoid the need for it.  Sometimes, the adapter cannot be avoided.  In the example shown here, the system includes a JTAG to Avalon master bridge, a special component that allows JTAG access to the system for runtime debugging in hardware.  This is one of the rare components that uses an asynchronous reset.  This component has a reset output connected to the reset input of the button_switch component, allowing the bridge to have reset control over the component.  As such, an adapter is needed to go between the asynchronous reset output of the bridge and the synchronous reset input of the button_switch component.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.393" slidebank="false" type="slide" noteswf="presentation_content/notes/393.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Next are conduits.  Conduit interfaces in Platform Designer represent any non-standard interface types or signal groups.   They can contain any arbitrary signal or collection of signals.   Conduits appear right along with standard interfaces for a component in the System Contents tab.  While conduits can be connected to other conduits with the same signals, more often than not they are exported out of the system to be connected externally.  Conduits are used, for example, for things like I/O signals that connect to LEDs or for high-speed transceiver I/O.  You can view the individual signals that make up a conduit by expanding the conduit in the Hierarchy tab or by selecting Show Signals in the Block Symbol tab.  &lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;For all off-the-shelf IP in the IP Catalog, conduits and their signals are already defined.  If you create custom components, you must specify what signals make up the conduit.  See the follow-up online training &amp;quot;Custom IP Development Using Avalon&amp;#174; and Arm* AMBA* AXI Interfaces”, linked at the end of this training.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.394" slidebank="false" type="slide" noteswf="presentation_content/notes/394.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The final item to configure on the System Contents tab is the memory-mapped addressing.  You can define the addressing for the memory-mapped, or control plane, portion of your system.  Platform Designer supports up to 64-bit addressing.  Each memory-mapped master interface has its own unique address map it uses to access the slaves to which it is connected.  The address span of a master interface is the collection of address spans of all of its connected slave interfaces.  The address span of each slave interface is determined by the lowest (or base) address assigned to it and the size of the component’s addressable register map for the interface, defined by the component itself.  In the example shown here, four slave interfaces are connected to the master interface named av_sm_master.  The address map for this master starts at 0x0 and goes up to 0x6f.  If there are any gaps in the address map, accesses to them are automatically handled by the interconnect.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;If multiple master interfaces connect to the same slave interface, the master ports&amp;#39; address maps converge as the slave ports will, by default, be assigned the same address for each master port. &lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;As connections between master and slave interfaces are made, Platform Designer automatically populates the base and ending address of each slave interface.  To change the assigned address for a particular slave interface, double-click its base address and type in a new address.  This can be done to simplify decoding logic, to enable the use of some pre-written software or hardware logic, or to resolve slave interface address conflicts.  Slave address spans cannot overlap the address spans of other slaves connected to the same master.  If you don’t require specific addressing, you can let Platform Designer auto-assign non-overlapping addresses.  To do this, simply select Assign Base Addresses from the System menu.  If you want to prevent any manually assigned addresses from being changed due to an auto-assignment, click the indicated lock icon.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.395" slidebank="false" type="slide" noteswf="presentation_content/notes/395.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Besides the base and end address columns on the System Contents tab, you can use the more detailed Address Map tab.  The Address Map tab contains a complete table of all memory-mapped device addresses, making it a little easier to configure the address mappings and address spans in the system instead of using just the System Contents tab.  On this tab, each column represents a memory-mapped master interface and each row represents a slave interface.  If a particular slave is connected to a master, the cell representing their intersection is filled with the slave’s address span as that master sees it.  &lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;By default, each slave is assigned the same address range for all masters that connect to it.  Just like on the System Contents tab, you can double-click a cell and edit the address for a slave’s connection to a master.  If a slave is connected to multiple master interfaces, indicated by multiple address ranges in a row of the table, the slave address is only changed for the master in whose column the cell is located.  Thus, a slave interface can be represented by different address spans for different masters.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;In the example shown here, the in slave interface on the led_fifo component is accessed by three different masters.  For two of those masters, the slave is accessed at address 0x0, while for the third master, the slave is accessed at address 0x1050.  If a slave is accessed at two or more different addresses because of multiple master connections, “mixed” appears in the base and end address columns of the System Contents tab, requiring the use of the Address Map tab to edit the addresses.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.349" slidebank="false" type="slide" noteswf="presentation_content/notes/349.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Once all components are added to the system and connected together, you’ll want to review the connections you’ve made and the system you’ve built.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.350" slidebank="false" type="slide" noteswf="presentation_content/notes/350.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;At any time during the process of building a Platform Designer system, use the various tabs discussed so far, like the System Contents and Clock or Reset Domains tabs, to review and verify your work.  There are also additional tabs available to help with this process.  As before, all of these tabs are accessible from the View menu.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;We’ve already mentioned the Parameters tab.  On the Parameters tab, you can review and edit the parameter values and options selected when a component was added to the system, just like in the component’s parameter editor.  Just select a component in any of the other tabs and go to the Parameters tab.  If you need to modify any parameters, you can do it directly in the Parameters tab without re-opening the parameter editor.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The Schematic tab provides a schematic view of the system.  Many times visualizing the system as a block diagram can aid in understanding the flow of data or how control logic fans out in the system.  Filter the schematic by excluding instances or types from the display to focus on only a part of the schematic.  You can also make or break interface connections directly in the Schematic tab.  A bird’s eye view of the entire system makes it easy to navigate around larger, more complex designs.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The Block Symbol tab displays a block symbol diagram of a selected item, whether it’s an individual component or the entire system.  If the entire system is selected in the Hierarchy tab, the external connections to the system are highlighted, similar to the view in the Schematic tab.  All exported interfaces appear on the symbol.  You can see the individual signals that make up each interface by enabling the Show Signals option in the tab.  	&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The Hierarchy tab lets you easily review system connection details, including the results of settings chosen in the System Contents tab, in a hierarchical format similar to the Project Navigator found in the Intel&amp;#174; Quartus&amp;#174; Prime software.  In this tab, you can view the entire system, the components that make up the system, any exported interfaces, the interfaces for each component, the signals that make up each interface, as well as all the connections between component interfaces.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.396" slidebank="false" type="slide" noteswf="presentation_content/notes/396.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;For system editing, Platform Designer includes a toolbar that allows you to remove or edit components in the system as well as change component ordering.  Rearranging the order of components in the system is primarily for cosmetic or readability reasons.  For example, you can group related system components, such as components with streaming interfaces or components with master or slave interfaces connected together.  Changing component order does not change any component interface connections, nor does it change the addressing of any memory-mapped slaves.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.397" slidebank="false" type="slide" noteswf="presentation_content/notes/397.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;We saw earlier that you can filter the System Contents tab by selecting clocks and resets in the Clock and Reset Domains tabs.  This also helps with viewing and understanding the contents and connections of your system.  For more detailed filtering control, open the Filters dialog box from the System Contents toolbar.  As before, you can filter components and connections displayed in the System Contents tab based on things like interface type and component connections.  However, with the Filters dialog box, you can even filter based on component name.  &lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The default filter view is to show all components and interfaces.  You can select from a number of pre-defined filters in the Filters dialog box.  You can also quickly switch to another pre-defined filter by right-clicking a component or interface in the System Contents window and selecting a filter from the Filter submenu.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Click the New button to create custom filters and store them for future use.  Give your new filter a name and define the criteria.  The criteria can be based on things like component name, interface type, or what objects are connected to.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.398" slidebank="false" type="slide" noteswf="presentation_content/notes/398.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;With the system built and reviewed, you are just about ready to generate the system with its custom interconnect.  Use the Device Family and Interconnect Requirements tabs to specify system-level settings used by the tool when generating the system.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;On the Device Family tab, make sure your target device family and part number are set correctly.  If the system was created from an open Intel Quartus Prime project, which is a requirement for Platform Designer in the Intel Quartus Prime Pro edition software, this information should already be set correctly.  You can change the target family and device if you want to optimize the generated output for a different device.  Note that the exact part number is not needed to build a system, but it is still recommended to be set correctly.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;On the Interconnect Requirements tab, choose options that affect the custom implementation of the interconnect.  Specify the maximum number of pipeline stages inserted into the interconnect to trade off between system performance and cycles of latency to complete memory-mapped transactions.  You can also select how you want any automatically generated clock domain crossing logic to be implemented: as handshake logic, as FIFOs, or let Platform Designer choose the implementation automatically.   With Auto, a FIFO is chosen for links that support bursting, and handshake logic is used for all others.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The Interconnect Requirements tab also includes a number of other requirements you can add and customize based on how you want to set up and operate your system.  See the Intel Quartus Prime software handbook for details on all the options available.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.399" slidebank="false" type="slide" noteswf="presentation_content/notes/399.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;At the bottom of the default Platform Designer user interface is the Messages tab.  This tab lists all informational, warning, and error messages, organized by message type.  Listed messages are based on the options you’ve selected and the connections you’ve made (or not made) in the system.  Double-click a message to highlight the item in the system that the message is referring to.  Error messages in red must be reviewed and fixed before the system can be generated.  While the system can be successfully generated with warnings, it’s a good idea to review the blue warning messages to make sure they will not cause any issues in your completed design.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.354" slidebank="false" type="slide" noteswf="presentation_content/notes/354.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The final step is to generate the HDL code for the system.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.401" slidebank="false" type="slide" noteswf="presentation_content/notes/401.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Once you’ve finished your system design, you need to generate the HDL code that describes the system’s components, interface connections, and interconnect.  To do this, select Generate HDL from the Generate menu.  Select the files you want Platform Designer to generate based on whether you plan to synthesize or simulate the system.  Platform Designer can generate simulation model files for simulation, synthesis optimized files, or a symbol file to be used in a schematic.  For both simulation and synthesis, choose the HDL language for the output files.  &lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The directory path where the generated files will be located can also be specified.  This defaults to a new directory that matches the name of the system.  Note that only the base location for generation can be selected.  The subdirectories where the simulation and synthesis files are stored are derived from that base location.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Click Generate to generate the system.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.400" slidebank="false" type="slide" noteswf="presentation_content/notes/400.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;If you will be instantiating the system as a sub-module in another design file, Platform Designer provides an instantiation template to simplify the instantiation process.  The template includes all of the system’s exported interfaces.  From the Generate menu, select Show Instantiation Template.  Choose between a VHDL or Verilog template, and copy the code into your design file.  Edit the port mapping sections in the template to connect the system to the rest of your design.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.357" slidebank="false" type="slide" noteswf="presentation_content/notes/357.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;So those are the main steps for creating a system design in Platform Designer.  To review, select the components you want in your system from the IP Catalog and configure them using each component&amp;#39;s parameter editor.  Use the Platform Designer user interface to connect or export interfaces.  Review the connections you’ve made to make sure they are valid and match the design&amp;#39;s intended behavior and functionality.  And finally, generate Verilog or VHDL files to represent your system so you can add it to your Intel&amp;#174; Quartus&amp;#174; Prime software project for compilation.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.402" slidebank="false" type="slide" noteswf="presentation_content/notes/402.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;With the system generated, you can now incorporate it into the Intel&amp;#174; Quartus&amp;#174; Prime design flow.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.403" slidebank="false" type="slide" noteswf="presentation_content/notes/403.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Here is the typical FPGA design flow.  It starts with coding the RTL according to your required specifications, followed by an RTL simulation to test the functionality of the design.  Synthesis turns the design into device-specific primitives, and place and route, performed by the Intel Quartus Prime Fitter, selects locations for those primitives and wires them together.  As you’ve seen, Platform Designer is a front-end tool for building a system.  It generates regular HDL code, so think of it as just another method for design entry in the flow.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.404" slidebank="false" type="slide" noteswf="presentation_content/notes/404.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;To incorporate a Platform Designer system into the typical Intel Quartus Prime software design flow, first, create the system as discussed so far.  As mentioned earlier, make sure that the target device has been set in Platform Designer.  This is required in the Pro edition since a Platform Designer system must be associated with a particular project when the system gets created.  Next, decide what should be the top-level entity in your project and where the Platform Designer system exists in the project hierarchy.  If the system itself is to be the top-level entity for the project, specify the name of the system as the top-level design entity name in the Intel Quartus Prime project.  If the system will be lower in the project hierarchy, use the instantiation template, discussed earlier, to instantiate the system at the correct location.  If the I/O pin names are to be different from the names of the signals exported from the system, you’ll need to do this, essentially creating a wrapper to translate the system exported signal names into the desired I/O pin names.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.405" slidebank="false" type="slide" noteswf="presentation_content/notes/405.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;No matter where the system exists in the hierarchy, you’ll need to set up the project to reference the generated system.  There are a couple of ways to do this.  The first is to generate the system, as discussed earlier, and then add the Intel Quartus Prime IP file, or .qip file, to the project as a design file.  This single file is a script that will add all of the other generated system files to the project at once.  After the system is manually generated, the .qip file is located in the synthesis subdirectory created by Platform Designer.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;The second method is to have the system generated when the project is compiled.  To do this, add the system’s .qsys file to the project instead of the .qip file.  Whenever the system is compiled, the system will get generated first before synthesis and place and route occur.  While this avoids manually generating the system every time you make a change to the .qsys file, project compilation time will be longer.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.406" slidebank="false" type="slide" noteswf="presentation_content/notes/406.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Next, constrain the project as usual.  Add project constraints such as I/O assignments, using tools like the Pin Planner or the Assignment Editor, design optimization settings, and .sdc timing constraint files.  While the generated Platform Designer files will include .sdc files for the interconnect and some IP, you must still create a top-level .sdc file that defines clock inputs into the system as well as for PLL-generated clocks.  You may also need to constrain I/O timing for components that connect directly to device I/O that do not generate their own .sdc files.  Once all required constraints are created, compile the project.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;If at any point you need to make changes to the Platform Designer system, make the changes in Platform Designer and follow the rest of the steps in this flow.  Do not edit the generated HDL directly.  If you edit the generated HDL, your changes will not get back-annotated into the .qsys file, and they will get overwritten the next time the system is generated.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.363" slidebank="false" type="slide" noteswf="presentation_content/notes/363.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;This concludes the training.  To summarize, you should now understand how Platform Designer provides an easy-to-use user interface for constructing designs targeting an Intel FPGA device.  As you saw, the tool includes a variety of tabs and views for creating and analyzing the system.  Once created, a Platform Designer system fits easily into the typical Intel Quartus Prime software design flow.  Platform Designer can be thought of as just another method of design entry for your project.&lt;br&gt;&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.409" slidebank="false" type="slide" noteswf="presentation_content/notes/409.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;This concludes this training.  If you missed the first part, you can register for it for free at the link shown here. To learn about additional resources available to help you with using Platform Designer, continue to the next slide.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.407" slidebank="false" type="slide" noteswf="presentation_content/notes/407.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;To learn more about the basic use of the tool, see the built-in help and the Intel Quartus Prime Standard edition handbook, specifically the chapters highlighted here.  There are also a number of other related chapters in the handbook that provide more information about more advanced use of the tool.&lt;br&gt;&lt;/font&gt;&lt;br&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;To learn more about the standard interfaces supported in Platform Designer, see the linked documents from Intel FPGA and Arm.  Finally, see the Embedded Peripherals IP User Guide for details about many of the off-the-shelf IP you can add to a Platform Designer system.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.408" slidebank="false" type="slide" noteswf="presentation_content/notes/408.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;You can also register for a number of free online trainings and two full-day instructor-led training classes all about Platform Designer.  Use the top link shown here to find all Platform Designer-related classes in our course catalog.  One online training to highlight is entitled Platform Designer in the Intel Quartus Prime Pro Edition Software.  Register for this training to learn about the unique features of Platform Designer found only in the Pro edition, including the creation and use of generic components.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.365" slidebank="false" type="slide" noteswf="presentation_content/notes/365.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Intel offers many options for FPGA training.  Our instructor-led training classes are full-day classes taught by experienced training engineers, either in a public class, on-site, or through a virtual classroom.  We also feature almost 300 free online training classes, just like this one, that allow you to study a topic at your own pace.  All of these classes can be viewed on a computer, and most of them can also be viewed on your favorite portable device.  You can also visit the Intel FPGA YouTube channel to watch all types of instructional videos, from short how-to videos in our Engineer-to-Engineer playlist to detailed webcasts on many different topics.  See the Intel FPGA training website to learn about our recommended curriculum for every type of user and to register for a class.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.366" slidebank="false" type="slide" noteswf="presentation_content/notes/366.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Intel FPGA provides many additional technical support resources besides technical training.  Check out the online Intel FPGA forums.  They’re a great place to connect with other users to share experiences and find solutions to common issues.  Visit the Intel FPGA wiki for design examples and up-to-date articles written by field application engineers.  Use the Knowledge Base to find solutions to the most common issues you may run into.  Manage your software licenses and online training registrations using the Self Service Licencing Center.  Finally, for local assistance, contact your local Intel FPGA sales office to speak with a field applications engineer.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.367" slidebank="false" type="slide" noteswf="presentation_content/notes/367.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;One more thing: when you registered for this online training, you should have received a link to a short survey where you can provide feedback.  We’d greatly appreciate it if you’d fill out that survey now.  We’re constantly updating and improving our training materials, and your feedback helps us create the materials that you want!  Thank you for your feedback.  My name is Steve and I want to thank you for taking this training on creating a system design with Platform Designer.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
      <slidetranscript slideid="5wJCT5nQceD.369" slidebank="false" type="slide" noteswf="presentation_content/notes/369.swf" notespng="">&lt;html&gt;&lt;p align='left'&gt;&lt;textformat leading='0' tabstops='[0, 48, 96, 144]' blockindent='0' indent='0'&gt;&lt;font face='Intel Clear' size='12.5pt' style='font-size:12.5pt' color='#444444'&gt;Thank you.&lt;/font&gt;&lt;/textformat&gt;&lt;/p&gt;&lt;/html&gt;</slidetranscript>
    </slidetranscripts>
  </transcript_data>
  <glossary_data />
</bwFrame>